{"version":3,"sources":["../../../src/domain/entity/ProjectWorkStatus.spec.ts"],"sourcesContent":["import { format } from 'date-fns';\nimport fc from 'fast-check';\nimport { describe, expect, it } from 'vitest';\n\nimport {\n  DATETIME_VALUE_FORMAT,\n  DatetimeValue,\n  ProjectId,\n  ProjectStopFlag,\n  ProjectWorkStatusId,\n  StatusReason,\n  WorkStatus,\n} from '../value';\n\nimport { ProjectWorkStatus } from './ProjectWorkStatus';\n\nconst WorkStatuses = [\n  'NOT_STARTED',\n  'DESIGN_IN_PROGRESS',\n  'START_AT_NEXT_MONTH',\n  'IN_PROGRESS_AT_SITE',\n  'CONSTRUCTION_COMPLETE',\n  'MONTHLY_REPORT_COMPLETE',\n  'PAYMENT_RECEIVED',\n  'ABORTED',\n  'DELETED',\n];\n\ndescribe('ProjectWorkStatus', () => {\n  it('should return ProjectWorkStatus when input is valid', () => {\n    fc.assert(\n      fc.property(\n        fc\n          .record({\n            projectWorkStatusId: fc.uuid({ version: 7 }),\n            isProjectStop: fc.boolean(),\n            projectId: fc.uuid({ version: 7 }),\n            statusName: fc.constantFrom(...WorkStatuses),\n            statusReason: fc.string({ minLength: 1 }),\n            statusTimestamp: fc.date({\n              min: new Date(0),\n              max: new Date(9999, 11, 31),\n            }),\n          })\n          .filter(({ statusReason }) => statusReason.trim().length > 1)\n          .map(\n            ({\n              projectWorkStatusId,\n              isProjectStop,\n              projectId,\n              statusName,\n              statusReason,\n              statusTimestamp,\n            }) => ({\n              projectWorkStatusId:\n                ProjectWorkStatusId.from(projectWorkStatusId),\n              isProjectStop: ProjectStopFlag.from(isProjectStop),\n              projectId: ProjectId.from(projectId),\n              statusName: WorkStatus.from(statusName),\n              statusReason: StatusReason.from(statusReason),\n              statusTimestamp: DatetimeValue.from(\n                format(statusTimestamp, DATETIME_VALUE_FORMAT),\n              ),\n            }),\n          ),\n        (args) => {\n          const value = new ProjectWorkStatus(args);\n\n          expect(value).toBeInstanceOf(ProjectWorkStatus);\n          expect(value).toEqual(args);\n        },\n      ),\n    );\n  });\n});\n"],"names":["format","fc","describe","expect","it","DATETIME_VALUE_FORMAT","DatetimeValue","ProjectId","ProjectStopFlag","ProjectWorkStatusId","StatusReason","WorkStatus","ProjectWorkStatus","WorkStatuses","assert","property","record","projectWorkStatusId","uuid","version","isProjectStop","boolean","projectId","statusName","constantFrom","statusReason","string","minLength","statusTimestamp","date","min","Date","max","filter","trim","length","map","from","args","value","toBeInstanceOf","toEqual"],"mappings":"AAAA,SAASA,MAAM,QAAQ,WAAW;AAClC,OAAOC,QAAQ,aAAa;AAC5B,SAASC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,QAAQ,SAAS;AAE9C,SACEC,qBAAqB,EACrBC,aAAa,EACbC,SAAS,EACTC,eAAe,EACfC,mBAAmB,EACnBC,YAAY,EACZC,UAAU,QACL,oBAAW;AAElB,SAASC,iBAAiB,QAAQ,yBAAsB;AAExD,MAAMC,eAAe;IACnB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAEDX,SAAS,qBAAqB;IAC5BE,GAAG,uDAAuD;QACxDH,GAAGa,MAAM,CACPb,GAAGc,QAAQ,CACTd,GACGe,MAAM,CAAC;YACNC,qBAAqBhB,GAAGiB,IAAI,CAAC;gBAAEC,SAAS;YAAE;YAC1CC,eAAenB,GAAGoB,OAAO;YACzBC,WAAWrB,GAAGiB,IAAI,CAAC;gBAAEC,SAAS;YAAE;YAChCI,YAAYtB,GAAGuB,YAAY,IAAIX;YAC/BY,cAAcxB,GAAGyB,MAAM,CAAC;gBAAEC,WAAW;YAAE;YACvCC,iBAAiB3B,GAAG4B,IAAI,CAAC;gBACvBC,KAAK,IAAIC,KAAK;gBACdC,KAAK,IAAID,KAAK,MAAM,IAAI;YAC1B;QACF,GACCE,MAAM,CAAC,CAAC,EAAER,YAAY,EAAE,GAAKA,aAAaS,IAAI,GAAGC,MAAM,GAAG,GAC1DC,GAAG,CACF,CAAC,EACCnB,mBAAmB,EACnBG,aAAa,EACbE,SAAS,EACTC,UAAU,EACVE,YAAY,EACZG,eAAe,EAChB,GAAM,CAAA;gBACLX,qBACER,oBAAoB4B,IAAI,CAACpB;gBAC3BG,eAAeZ,gBAAgB6B,IAAI,CAACjB;gBACpCE,WAAWf,UAAU8B,IAAI,CAACf;gBAC1BC,YAAYZ,WAAW0B,IAAI,CAACd;gBAC5BE,cAAcf,aAAa2B,IAAI,CAACZ;gBAChCG,iBAAiBtB,cAAc+B,IAAI,CACjCrC,OAAO4B,iBAAiBvB;YAE5B,CAAA,IAEJ,CAACiC;YACC,MAAMC,QAAQ,IAAI3B,kBAAkB0B;YAEpCnC,OAAOoC,OAAOC,cAAc,CAAC5B;YAC7BT,OAAOoC,OAAOE,OAAO,CAACH;QACxB;IAGN;AACF"}