{"version":3,"sources":["../../../../src/domain/value/String/Name.spec.ts"],"sourcesContent":["import fc from 'fast-check';\nimport { describe, expect, it } from 'vitest';\n\nimport {\n  ConstructionTypeName,\n  MaterialName,\n  ProjectContractTypeName,\n  ProjectName,\n  ProjectTypeName,\n} from './Name';\n\ndescribe('Name', () => {\n  describe('ProjectName', () => {\n    it('Should return ProjectName when input is valid', () => {\n      fc.assert(\n        fc.property(\n          fc\n            .string({ minLength: 1, maxLength: 256 })\n            .map((name) => name.trim()),\n          (name) => {\n            fc.pre(name.length > 1 && name.length < 257);\n            const value = ProjectName.from(name);\n            expect(value).toBeInstanceOf(ProjectName);\n            expect(value.value).toEqual(name);\n          },\n        ),\n      );\n    });\n    it('Should throw \"ProjectName has maximum length of 256\" name when input too long string', () => {\n      fc.assert(\n        fc.property(\n          fc.string({ minLength: 257 }).map((name) => name.trim()),\n          (name) => {\n            fc.pre(name.length > 256);\n            expect(() => {\n              ProjectName.from(name);\n            }).toThrow(/ProjectName has maximum length of 256/);\n          },\n        ),\n      );\n    });\n    it('Should throw \"ProjectName must not be empty\" when input empty string', () => {\n      fc.assert(\n        fc.property(fc.constantFrom('', ' ', '　'), (name) => {\n          expect(() => {\n            ProjectName.from(name);\n          }).toThrow(/ProjectName must not be empty/);\n        }),\n      );\n    });\n  });\n  describe('ProjectTypeName', () => {\n    it('Should return ProjectTypeName when input is valid', () => {\n      fc.assert(\n        fc.property(\n          fc.string({ minLength: 1, maxLength: 45 }).map((name) => name.trim()),\n          (name) => {\n            fc.pre(name.length > 1 && name.length < 46);\n            const value = ProjectTypeName.from(name);\n            expect(value).toBeInstanceOf(ProjectTypeName);\n            expect(value.value).toEqual(name);\n          },\n        ),\n      );\n    });\n    it('Should throw \"ProjectTypeName has maximum length of 45\" name when input too long string', () => {\n      fc.assert(\n        fc.property(\n          fc.string({ minLength: 46 }).map((name) => name.trim()),\n          (name) => {\n            fc.pre(name.length > 45);\n            expect(() => {\n              ProjectTypeName.from(name);\n            }).toThrow(/ProjectTypeName has maximum length of 45/);\n          },\n        ),\n      );\n    });\n    it('Should throw \"ProjectTypeName must not be empty\" when input empty string', () => {\n      fc.assert(\n        fc.property(fc.constantFrom('', ' ', '　'), (name) => {\n          expect(() => {\n            ProjectTypeName.from(name);\n          }).toThrow(/ProjectTypeName must not be empty/);\n        }),\n      );\n    });\n  });\n  describe('ProjectContractTypeName', () => {\n    it('Should return ProjectContractTypeName when input is valid', () => {\n      fc.assert(\n        fc.property(\n          fc.string({ minLength: 1, maxLength: 45 }).map((name) => name.trim()),\n          (name) => {\n            fc.pre(name.length > 1 && name.length < 46);\n            const value = ProjectContractTypeName.from(name);\n            expect(value).toBeInstanceOf(ProjectContractTypeName);\n            expect(value.value).toEqual(name);\n          },\n        ),\n      );\n    });\n    it('Should throw \"ProjectContractTypeName has maximum length of 45\" name when input too long string', () => {\n      fc.assert(\n        fc.property(\n          fc.string({ minLength: 46 }).map((name) => name.trim()),\n          (name) => {\n            fc.pre(name.length > 45);\n            expect(() => {\n              ProjectContractTypeName.from(name);\n            }).toThrow(/ProjectContractTypeName has maximum length of 45/);\n          },\n        ),\n      );\n    });\n    it('Should throw \"ProjectContractTypeName must not be empty\" when input empty string', () => {\n      fc.assert(\n        fc.property(fc.constantFrom('', ' ', '　'), (name) => {\n          expect(() => {\n            ProjectContractTypeName.from(name);\n          }).toThrow(/ProjectContractTypeName must not be empty/);\n        }),\n      );\n    });\n  });\n  describe('MaterialName', () => {\n    it('Should return MaterialName when input is valid', () => {\n      fc.assert(\n        fc.property(\n          fc\n            .string({ minLength: 1, maxLength: 256 })\n            .map((name) => name.trim()),\n          (name) => {\n            fc.pre(name.length > 1 && name.length < 257);\n            const value = MaterialName.from(name);\n            expect(value).toBeInstanceOf(MaterialName);\n            expect(value.value).toEqual(name);\n          },\n        ),\n      );\n    });\n\n    it('Should throw \"MaterialName has maximum length of 256\" name when input too long string', () => {\n      fc.assert(\n        fc.property(\n          fc.string({ minLength: 257 }).map((name) => name.trim()),\n          (name) => {\n            fc.pre(name.length > 256);\n            expect(() => {\n              MaterialName.from(name);\n            }).toThrow(/MaterialName has maximum length of 256/);\n          },\n        ),\n      );\n    });\n    it('Should throw \"MaterialName must not be empty\" when input empty string', () => {\n      fc.assert(\n        fc.property(fc.constantFrom('', ' ', '　'), (name) => {\n          expect(() => {\n            MaterialName.from(name);\n          }).toThrow(/MaterialName must not be empty/);\n        }),\n      );\n    });\n  });\n  describe('ConstructionTypeName', () => {\n    it('Should return ConstructionTypeName when input is valid', () => {\n      fc.assert(\n        fc.property(\n          fc.string({ minLength: 1, maxLength: 50 }).map((name) => name.trim()),\n          (name) => {\n            fc.pre(name.length > 1 && name.length < 51);\n            const value = ConstructionTypeName.from(name);\n            expect(value).toBeInstanceOf(ConstructionTypeName);\n            expect(value.value).toEqual(name);\n          },\n        ),\n      );\n    });\n    it('Should throw \"ConstructionTypeName has maximum length of 50\" name when input too long string', () => {\n      fc.assert(\n        fc.property(\n          fc.string({ minLength: 51 }).map((name) => name.trim()),\n          (name) => {\n            fc.pre(name.length > 50);\n            expect(() => {\n              ConstructionTypeName.from(name);\n            }).toThrow(/ConstructionTypeName has maximum length of 50/);\n          },\n        ),\n      );\n    });\n    it('Should throw \"ConstructionTypeName must not be empty\" when input empty string', () => {\n      fc.assert(\n        fc.property(fc.constantFrom('', ' ', '　'), (name) => {\n          expect(() => {\n            ConstructionTypeName.from(name);\n          }).toThrow(/ConstructionTypeName must not be empty/);\n        }),\n      );\n    });\n  });\n});\n"],"names":["fc","describe","expect","it","ConstructionTypeName","MaterialName","ProjectContractTypeName","ProjectName","ProjectTypeName","assert","property","string","minLength","maxLength","map","name","trim","pre","length","value","from","toBeInstanceOf","toEqual","toThrow","constantFrom"],"mappings":"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"}