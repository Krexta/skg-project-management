{"version":3,"sources":["../../../../src/domain/value/Date/YearMonthDay.spec.ts"],"sourcesContent":["import fc from 'fast-check';\nimport { describe, expect, it } from 'vitest';\n\nimport { YearMonthDay } from './YearMonthDay';\n\ndescribe('YearMonthDay', () => {\n  it('should return YearMonthDay when input is valid', () => {\n    fc.assert(\n      fc.property(\n        fc\n          .date({ min: new Date(0), max: new Date(9999, 11, 31) })\n          .map((date) => {\n            const year = date.getFullYear().toString().padStart(4, '0');\n            const month = (date.getMonth() + 1).toString().padStart(2, '0');\n            const day = date.getDate().toString().padStart(2, '0');\n            return { year, month, day, date: `${year}-${month}-${day}` };\n          }),\n        ({ year, month, day, date }) => {\n          const value = YearMonthDay.from(date);\n\n          expect(value).toBeInstanceOf(YearMonthDay);\n\n          expect(value.yearString).toEqual(year);\n          expect(value.monthString).toEqual(month);\n          expect(value.dayString).toEqual(day);\n\n          expect(value.year).toBe(Number(year));\n          expect(value.month).toBe(Number(month));\n          expect(value.day).toBe(Number(day));\n\n          expect(value.toString()).toEqual(date);\n        },\n      ),\n    );\n  });\n  it('should throw invalid year exception when input invalid year', () => {\n    fc.assert(\n      fc.property(fc.string({ minLength: 1, maxLength: 3 }), (year) => {\n        expect(() => YearMonthDay.from(`${year}-01-01`)).toThrow(\n          /Invalid Year/,\n        );\n      }),\n    );\n  });\n  it('should throw invalid month exception when input invalid month', () => {\n    fc.assert(\n      fc.property(\n        fc.integer({ min: 13, max: 23 }).map((v) => v.toString()),\n        (month) => {\n          expect(() => YearMonthDay.from(`2024-${month}-01`)).toThrow(\n            /Invalid Month/,\n          );\n        },\n      ),\n    );\n  });\n  it('should throw invalid day exception when input invalid day', () => {\n    fc.assert(\n      fc.property(fc.integer({ min: 32, max: 99 }), (day) => {\n        expect(() => YearMonthDay.from(`2024-11-${day}`)).toThrow(\n          /Invalid Day/,\n        );\n      }),\n    );\n  });\n  it('should return YearMonthDay when input is 02/29 in leap year', () => {\n    fc.assert(\n      fc.property(\n        fc\n          .integer({ min: 0, max: 9999 })\n          .map((year) => year.toString().padStart(4, '0')),\n        (year) => {\n          //is leap year\n          fc.pre(\n            (Number(year) % 4 === 0 && Number(year) % 100 !== 0) ||\n              Number(year) % 400 === 0,\n          );\n          const day = '29';\n          const month = '02';\n          const date = `${year}-${month}-${day}`;\n          const value = YearMonthDay.from(date);\n\n          expect(value).toBeInstanceOf(YearMonthDay);\n\n          expect(value.yearString).toEqual(year);\n          expect(value.monthString).toEqual(month);\n          expect(value.dayString).toEqual(day);\n\n          expect(value.year).toBe(Number(year));\n          expect(value.month).toBe(Number(month));\n          expect(value.day).toBe(Number(day));\n\n          expect(value.toString()).toEqual(date);\n        },\n      ),\n    );\n  });\n  it('should throw invalid day exception when input is 02/29 in non-leap year', () => {\n    fc.assert(\n      fc.property(\n        fc\n          .integer({ min: 0, max: 9999 })\n          .map((year) => year.toString().padStart(4, '0')),\n        (year) => {\n          fc.pre(\n            !(\n              (Number(year) % 4 === 0 && Number(year) % 100 !== 0) ||\n              Number(year) % 400 === 0\n            ),\n          );\n          const day = '29';\n          const month = '02';\n          const date = `${year}-${month}-${day}`;\n          expect(() => YearMonthDay.from(date)).toThrow(/Invalid Day/);\n        },\n      ),\n    );\n  });\n});\n"],"names":["fc","describe","expect","it","YearMonthDay","assert","property","date","min","Date","max","map","year","getFullYear","toString","padStart","month","getMonth","day","getDate","value","from","toBeInstanceOf","yearString","toEqual","monthString","dayString","toBe","Number","string","minLength","maxLength","toThrow","integer","v","pre"],"mappings":"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"}