{"version":3,"sources":["../../../../src/domain/value/Number/TotalManWork.spec.ts"],"sourcesContent":["import fc from 'fast-check';\nimport { describe, expect, it } from 'vitest';\n\nimport { TotalManWork } from './TotalManWork';\n\ndescribe('TotalManWork', () => {\n  it('should return TotalManWork when input is valid', () => {\n    fc.assert(\n      fc.property(\n        fc.option(fc.stringMatching(/^\\d{1,8}(\\.\\d{1,2})?$/), { nil: null }),\n        (totalManWork) => {\n          const value = TotalManWork.from(totalManWork);\n\n          expect(value).toBeInstanceOf(TotalManWork);\n          expect(value.value).toEqual({\n            value: totalManWork,\n            precision: 10,\n            scale: 2,\n          });\n        },\n      ),\n    );\n  });\n\n  it('should throw \"TotalManWork must be number\" when input NaN', () => {\n    fc.assert(\n      fc.property(\n        fc.string().filter((val) => Number.isNaN(Number(val))),\n        (totalManWork) => {\n          expect(() => TotalManWork.from(totalManWork)).toThrow(\n            /TotalManWork must be number/,\n          );\n        },\n      ),\n    );\n  });\n\n  it('should throw \"TotalManWork must be Decimal(10,2)\" when input not Decimal(10,2)', () => {\n    fc.assert(\n      fc.property(\n        fc.stringMatching(/^\\d{1,7}(\\.[1-9]{3,})$/),\n        (totalManWork) => {\n          expect(() => TotalManWork.from(totalManWork)).toThrow(\n            /TotalManWork must be Decimal\\(10,2\\)/,\n          );\n        },\n      ),\n    );\n  });\n\n  it('should throw \"TotalManWork must be positive\" when input negative number', () => {\n    fc.assert(\n      fc.property(\n        fc.integer({ min: -(10 ^ 8), max: -1 }).map((v) => v.toString()),\n        (totalManWork) => {\n          expect(() => TotalManWork.from(totalManWork)).toThrow(\n            /TotalManWork must be positive/,\n          );\n        },\n      ),\n    );\n  });\n\n  describe('toValue()', () => {\n    it('should return string of value when current value is not null', () => {\n      fc.assert(\n        fc.property(fc.stringMatching(/^\\d{1,8}(\\.\\d{1,2})?$/), (total) => {\n          const value = TotalManWork.from(total);\n          expect(value.toValue()).toEqual(total);\n        }),\n      );\n    });\n\n    it('should return null when current value is null', () => {\n      const value = TotalManWork.from(null);\n      expect(value.toValue()).toEqual(null);\n    });\n  });\n});\n"],"names":["fc","describe","expect","it","TotalManWork","assert","property","option","stringMatching","nil","totalManWork","value","from","toBeInstanceOf","toEqual","precision","scale","string","filter","val","Number","isNaN","toThrow","integer","min","max","map","v","toString","total","toValue"],"mappings":"AAAA,OAAOA,QAAQ,aAAa;AAC5B,SAASC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,QAAQ,SAAS;AAE9C,SAASC,YAAY,QAAQ,oBAAiB;AAE9CH,SAAS,gBAAgB;IACvBE,GAAG,kDAAkD;QACnDH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CACTN,GAAGO,MAAM,CAACP,GAAGQ,cAAc,CAAC,0BAA0B;YAAEC,KAAK;QAAK,IAClE,CAACC;YACC,MAAMC,QAAQP,aAAaQ,IAAI,CAACF;YAEhCR,OAAOS,OAAOE,cAAc,CAACT;YAC7BF,OAAOS,MAAMA,KAAK,EAAEG,OAAO,CAAC;gBAC1BH,OAAOD;gBACPK,WAAW;gBACXC,OAAO;YACT;QACF;IAGN;IAEAb,GAAG,6DAA6D;QAC9DH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CACTN,GAAGiB,MAAM,GAAGC,MAAM,CAAC,CAACC,MAAQC,OAAOC,KAAK,CAACD,OAAOD,QAChD,CAACT;YACCR,OAAO,IAAME,aAAaQ,IAAI,CAACF,eAAeY,OAAO,CACnD;QAEJ;IAGN;IAEAnB,GAAG,kFAAkF;QACnFH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CACTN,GAAGQ,cAAc,CAAC,2BAClB,CAACE;YACCR,OAAO,IAAME,aAAaQ,IAAI,CAACF,eAAeY,OAAO,CACnD;QAEJ;IAGN;IAEAnB,GAAG,2EAA2E;QAC5EH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CACTN,GAAGuB,OAAO,CAAC;YAAEC,KAAK,CAAE,CAAA,KAAK,CAAA;YAAIC,KAAK,CAAC;QAAE,GAAGC,GAAG,CAAC,CAACC,IAAMA,EAAEC,QAAQ,KAC7D,CAAClB;YACCR,OAAO,IAAME,aAAaQ,IAAI,CAACF,eAAeY,OAAO,CACnD;QAEJ;IAGN;IAEArB,SAAS,aAAa;QACpBE,GAAG,gEAAgE;YACjEH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CAACN,GAAGQ,cAAc,CAAC,0BAA0B,CAACqB;gBACvD,MAAMlB,QAAQP,aAAaQ,IAAI,CAACiB;gBAChC3B,OAAOS,MAAMmB,OAAO,IAAIhB,OAAO,CAACe;YAClC;QAEJ;QAEA1B,GAAG,iDAAiD;YAClD,MAAMQ,QAAQP,aAAaQ,IAAI,CAAC;YAChCV,OAAOS,MAAMmB,OAAO,IAAIhB,OAAO,CAAC;QAClC;IACF;AACF"}