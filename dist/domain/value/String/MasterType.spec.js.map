{"version":3,"sources":["../../../../src/domain/value/String/MasterType.spec.ts"],"sourcesContent":["import fc from 'fast-check';\nimport { describe, expect, it } from 'vitest';\n\nimport {\n  CONSTRUCTION_TYPE_LIST,\n  CONSTRUCTION_TYPE_TYPE,\n  ConstructionType,\n  CONTRACT_TYPE_LIST,\n  CONTRACT_TYPE_TYPE,\n  ContractType,\n  Material,\n  MATERIAL_LIST,\n  MATERIAL_TYPE,\n  WORK_TYPE_LIST,\n  WORK_TYPE_TYPE,\n  WorkType,\n} from './MasterType';\n\ndescribe('MasterType', () => {\n  describe('WorkType', () => {\n    it('should return WorkType when input is valid', () => {\n      fc.assert(\n        fc.property(fc.constantFrom(...WORK_TYPE_LIST), (val) => {\n          const value = WorkType.from(val);\n\n          expect(value).toBeInstanceOf(WorkType);\n          expect(value.value).toEqual(val);\n        }),\n      );\n    });\n    it('should throw error when input not in enum', () => {\n      fc.assert(\n        fc.property(\n          fc\n            .string()\n            .filter((val) => !WORK_TYPE_LIST.includes(val as WORK_TYPE_TYPE)),\n          (status) => {\n            expect(() => WorkType.from(status)).toThrow(/Invalid work type/);\n          },\n        ),\n      );\n    });\n  });\n  describe('ContractType', () => {\n    it('should return ContractType when input is valid', () => {\n      fc.assert(\n        fc.property(fc.constantFrom(...CONTRACT_TYPE_LIST), (val) => {\n          const value = ContractType.from(val);\n\n          expect(value).toBeInstanceOf(ContractType);\n          expect(value.value).toEqual(val);\n        }),\n      );\n    });\n    it('should throw error when input not in enum', () => {\n      fc.assert(\n        fc.property(\n          fc\n            .string()\n            .filter(\n              (val) => !CONTRACT_TYPE_LIST.includes(val as CONTRACT_TYPE_TYPE),\n            ),\n          (status) => {\n            expect(() => ContractType.from(status)).toThrow(\n              /Invalid contract type/,\n            );\n          },\n        ),\n      );\n    });\n  });\n  describe('Material', () => {\n    it('should return Material when input is valid', () => {\n      fc.assert(\n        fc.property(fc.constantFrom(...MATERIAL_LIST), (val) => {\n          const value = Material.from(val);\n\n          expect(value).toBeInstanceOf(Material);\n          expect(value.value).toEqual(val);\n        }),\n      );\n    });\n    it('should throw error when input not in enum', () => {\n      fc.assert(\n        fc.property(\n          fc\n            .string()\n            .filter((val) => !MATERIAL_LIST.includes(val as MATERIAL_TYPE)),\n          (status) => {\n            expect(() => Material.from(status)).toThrow(/Invalid material/);\n          },\n        ),\n      );\n    });\n  });\n  describe('ConstructionType', () => {\n    it('should return ConstructionType when input is valid', () => {\n      fc.assert(\n        fc.property(fc.constantFrom(...CONSTRUCTION_TYPE_LIST), (val) => {\n          const value = ConstructionType.from(val);\n\n          expect(value).toBeInstanceOf(ConstructionType);\n          expect(value.value).toEqual(val);\n        }),\n      );\n    });\n    it('should throw error when input not in enum', () => {\n      fc.assert(\n        fc.property(\n          fc\n            .string()\n            .filter(\n              (val) =>\n                !CONSTRUCTION_TYPE_LIST.includes(val as CONSTRUCTION_TYPE_TYPE),\n            ),\n          (status) => {\n            expect(() => ConstructionType.from(status)).toThrow(\n              /Invalid construction type/,\n            );\n          },\n        ),\n      );\n    });\n  });\n});\n"],"names":["fc","describe","expect","it","CONSTRUCTION_TYPE_LIST","ConstructionType","CONTRACT_TYPE_LIST","ContractType","Material","MATERIAL_LIST","WORK_TYPE_LIST","WorkType","assert","property","constantFrom","val","value","from","toBeInstanceOf","toEqual","string","filter","includes","status","toThrow"],"mappings":"AAAA,OAAOA,QAAQ,aAAa;AAC5B,SAASC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,QAAQ,SAAS;AAE9C,SACEC,sBAAsB,EAEtBC,gBAAgB,EAChBC,kBAAkB,EAElBC,YAAY,EACZC,QAAQ,EACRC,aAAa,EAEbC,cAAc,EAEdC,QAAQ,QACH,kBAAe;AAEtBV,SAAS,cAAc;IACrBA,SAAS,YAAY;QACnBE,GAAG,8CAA8C;YAC/CH,GAAGY,MAAM,CACPZ,GAAGa,QAAQ,CAACb,GAAGc,YAAY,IAAIJ,iBAAiB,CAACK;gBAC/C,MAAMC,QAAQL,SAASM,IAAI,CAACF;gBAE5Bb,OAAOc,OAAOE,cAAc,CAACP;gBAC7BT,OAAOc,MAAMA,KAAK,EAAEG,OAAO,CAACJ;YAC9B;QAEJ;QACAZ,GAAG,6CAA6C;YAC9CH,GAAGY,MAAM,CACPZ,GAAGa,QAAQ,CACTb,GACGoB,MAAM,GACNC,MAAM,CAAC,CAACN,MAAQ,CAACL,eAAeY,QAAQ,CAACP,OAC5C,CAACQ;gBACCrB,OAAO,IAAMS,SAASM,IAAI,CAACM,SAASC,OAAO,CAAC;YAC9C;QAGN;IACF;IACAvB,SAAS,gBAAgB;QACvBE,GAAG,kDAAkD;YACnDH,GAAGY,MAAM,CACPZ,GAAGa,QAAQ,CAACb,GAAGc,YAAY,IAAIR,qBAAqB,CAACS;gBACnD,MAAMC,QAAQT,aAAaU,IAAI,CAACF;gBAEhCb,OAAOc,OAAOE,cAAc,CAACX;gBAC7BL,OAAOc,MAAMA,KAAK,EAAEG,OAAO,CAACJ;YAC9B;QAEJ;QACAZ,GAAG,6CAA6C;YAC9CH,GAAGY,MAAM,CACPZ,GAAGa,QAAQ,CACTb,GACGoB,MAAM,GACNC,MAAM,CACL,CAACN,MAAQ,CAACT,mBAAmBgB,QAAQ,CAACP,OAE1C,CAACQ;gBACCrB,OAAO,IAAMK,aAAaU,IAAI,CAACM,SAASC,OAAO,CAC7C;YAEJ;QAGN;IACF;IACAvB,SAAS,YAAY;QACnBE,GAAG,8CAA8C;YAC/CH,GAAGY,MAAM,CACPZ,GAAGa,QAAQ,CAACb,GAAGc,YAAY,IAAIL,gBAAgB,CAACM;gBAC9C,MAAMC,QAAQR,SAASS,IAAI,CAACF;gBAE5Bb,OAAOc,OAAOE,cAAc,CAACV;gBAC7BN,OAAOc,MAAMA,KAAK,EAAEG,OAAO,CAACJ;YAC9B;QAEJ;QACAZ,GAAG,6CAA6C;YAC9CH,GAAGY,MAAM,CACPZ,GAAGa,QAAQ,CACTb,GACGoB,MAAM,GACNC,MAAM,CAAC,CAACN,MAAQ,CAACN,cAAca,QAAQ,CAACP,OAC3C,CAACQ;gBACCrB,OAAO,IAAMM,SAASS,IAAI,CAACM,SAASC,OAAO,CAAC;YAC9C;QAGN;IACF;IACAvB,SAAS,oBAAoB;QAC3BE,GAAG,sDAAsD;YACvDH,GAAGY,MAAM,CACPZ,GAAGa,QAAQ,CAACb,GAAGc,YAAY,IAAIV,yBAAyB,CAACW;gBACvD,MAAMC,QAAQX,iBAAiBY,IAAI,CAACF;gBAEpCb,OAAOc,OAAOE,cAAc,CAACb;gBAC7BH,OAAOc,MAAMA,KAAK,EAAEG,OAAO,CAACJ;YAC9B;QAEJ;QACAZ,GAAG,6CAA6C;YAC9CH,GAAGY,MAAM,CACPZ,GAAGa,QAAQ,CACTb,GACGoB,MAAM,GACNC,MAAM,CACL,CAACN,MACC,CAACX,uBAAuBkB,QAAQ,CAACP,OAEvC,CAACQ;gBACCrB,OAAO,IAAMG,iBAAiBY,IAAI,CAACM,SAASC,OAAO,CACjD;YAEJ;QAGN;IACF;AACF"}