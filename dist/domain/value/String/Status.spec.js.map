{"version":3,"sources":["../../../../src/domain/value/String/Status.spec.ts"],"sourcesContent":["import fc from 'fast-check';\nimport { describe, expect, it } from 'vitest';\n\nimport { ContractStatus, WorkStatus } from '.';\n\nconst WorkStatuses = [\n  'NOT_STARTED',\n  'DESIGN_IN_PROGRESS',\n  'START_AT_NEXT_MONTH',\n  'IN_PROGRESS_AT_SITE',\n  'CONSTRUCTION_COMPLETE',\n  'MONTHLY_REPORT_COMPLETE',\n  'PAYMENT_RECEIVED',\n  'ABORTED',\n  'DELETED',\n];\nconst ContractStatuses = ['NEW', 'SIGNED', 'CANCELED'];\n\ndescribe('Status', () => {\n  describe('WorkStatus', () => {\n    it('should return WorkStatus when input is valid', () => {\n      fc.assert(\n        fc.property(fc.constantFrom(...WorkStatuses), (status) => {\n          const value = WorkStatus.from(status);\n\n          expect(value).toBeInstanceOf(WorkStatus);\n          expect(value.value).toEqual(status);\n        }),\n      );\n    });\n    it('should return NOT_STARTED when make new statue', () => {\n      const value = WorkStatus.makeNotStartedStatus();\n      expect(value).toBeInstanceOf(WorkStatus);\n      expect(value.value).toEqual('NOT_STARTED');\n    });\n    it('should throw \"invalid work status\" when input not in enum', () => {\n      fc.assert(\n        fc.property(\n          fc.string().filter((status) => !WorkStatuses.includes(status)),\n          (status) => {\n            expect(() => WorkStatus.from(status)).toThrow(\n              /invalid work status/,\n            );\n          },\n        ),\n      );\n    });\n  });\n\n  describe('ContractStatus', () => {\n    it('should return ContractStatus when input is valid', () => {\n      fc.assert(\n        fc.property(fc.constantFrom(...ContractStatuses), (status) => {\n          const value = ContractStatus.from(status);\n\n          expect(value).toBeInstanceOf(ContractStatus);\n          expect(value.value).toEqual(status);\n        }),\n      );\n    });\n    it('should return NEW when make new statue', () => {\n      const value = ContractStatus.makeNewStatus();\n\n      expect(value).toBeInstanceOf(ContractStatus);\n      expect(value.value).toEqual('NEW');\n    });\n    it('should throw \"invalid contract status\" when input not in enum', () => {\n      fc.assert(\n        fc.property(\n          fc.string().filter((status) => !ContractStatuses.includes(status)),\n          (status) => {\n            expect(() => ContractStatus.from(status)).toThrow(\n              /invalid contract status/,\n            );\n          },\n        ),\n      );\n    });\n  });\n});\n"],"names":["fc","describe","expect","it","ContractStatus","WorkStatus","WorkStatuses","ContractStatuses","assert","property","constantFrom","status","value","from","toBeInstanceOf","toEqual","makeNotStartedStatus","string","filter","includes","toThrow","makeNewStatus"],"mappings":"AAAA,OAAOA,QAAQ,aAAa;AAC5B,SAASC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,QAAQ,SAAS;AAE9C,SAASC,cAAc,EAAEC,UAAU,QAAQ,aAAI;AAE/C,MAAMC,eAAe;IACnB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AACD,MAAMC,mBAAmB;IAAC;IAAO;IAAU;CAAW;AAEtDN,SAAS,UAAU;IACjBA,SAAS,cAAc;QACrBE,GAAG,gDAAgD;YACjDH,GAAGQ,MAAM,CACPR,GAAGS,QAAQ,CAACT,GAAGU,YAAY,IAAIJ,eAAe,CAACK;gBAC7C,MAAMC,QAAQP,WAAWQ,IAAI,CAACF;gBAE9BT,OAAOU,OAAOE,cAAc,CAACT;gBAC7BH,OAAOU,MAAMA,KAAK,EAAEG,OAAO,CAACJ;YAC9B;QAEJ;QACAR,GAAG,kDAAkD;YACnD,MAAMS,QAAQP,WAAWW,oBAAoB;YAC7Cd,OAAOU,OAAOE,cAAc,CAACT;YAC7BH,OAAOU,MAAMA,KAAK,EAAEG,OAAO,CAAC;QAC9B;QACAZ,GAAG,6DAA6D;YAC9DH,GAAGQ,MAAM,CACPR,GAAGS,QAAQ,CACTT,GAAGiB,MAAM,GAAGC,MAAM,CAAC,CAACP,SAAW,CAACL,aAAaa,QAAQ,CAACR,UACtD,CAACA;gBACCT,OAAO,IAAMG,WAAWQ,IAAI,CAACF,SAASS,OAAO,CAC3C;YAEJ;QAGN;IACF;IAEAnB,SAAS,kBAAkB;QACzBE,GAAG,oDAAoD;YACrDH,GAAGQ,MAAM,CACPR,GAAGS,QAAQ,CAACT,GAAGU,YAAY,IAAIH,mBAAmB,CAACI;gBACjD,MAAMC,QAAQR,eAAeS,IAAI,CAACF;gBAElCT,OAAOU,OAAOE,cAAc,CAACV;gBAC7BF,OAAOU,MAAMA,KAAK,EAAEG,OAAO,CAACJ;YAC9B;QAEJ;QACAR,GAAG,0CAA0C;YAC3C,MAAMS,QAAQR,eAAeiB,aAAa;YAE1CnB,OAAOU,OAAOE,cAAc,CAACV;YAC7BF,OAAOU,MAAMA,KAAK,EAAEG,OAAO,CAAC;QAC9B;QACAZ,GAAG,iEAAiE;YAClEH,GAAGQ,MAAM,CACPR,GAAGS,QAAQ,CACTT,GAAGiB,MAAM,GAAGC,MAAM,CAAC,CAACP,SAAW,CAACJ,iBAAiBY,QAAQ,CAACR,UAC1D,CAACA;gBACCT,OAAO,IAAME,eAAeS,IAAI,CAACF,SAASS,OAAO,CAC/C;YAEJ;QAGN;IACF;AACF"}