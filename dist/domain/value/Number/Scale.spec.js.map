{"version":3,"sources":["../../../../src/domain/value/Number/Scale.spec.ts"],"sourcesContent":["import fc from 'fast-check';\nimport { describe, expect, it } from 'vitest';\n\nimport { Scale } from './Scale';\n\ndescribe('Scale', () => {\n  it('should return Scale when input is valid', () => {\n    fc.assert(\n      fc.property(\n        fc.option(fc.stringMatching(/^\\d{1,14}(\\.\\d)?$/), { nil: null }),\n        (scale) => {\n          const value = Scale.from(scale);\n          expect(value).toBeInstanceOf(Scale);\n          expect(value.value).toEqual({\n            value: scale,\n            precision: 15,\n            scale: 1,\n          });\n        },\n      ),\n    );\n  });\n\n  it('should throw \"Scale must be number\" when input NaN', () => {\n    fc.assert(\n      fc.property(\n        fc.string().filter((val) => Number.isNaN(Number(val))),\n        (budget) => {\n          expect(() => Scale.from(budget)).toThrow(/Scale must be number/);\n        },\n      ),\n    );\n  });\n\n  it('should throw \"Scale must be Decimal(15,1)\" when input not Decimal(15,1)', () => {\n    fc.assert(\n      fc.property(fc.stringMatching(/^\\d{1,13}(\\.[1-9]{2,})$/), (scale) => {\n        expect(() => Scale.from(scale)).toThrow(\n          /Scale must be Decimal\\(15,1\\)/,\n        );\n      }),\n    );\n  });\n\n  it('should throw \"Scale must be positive\" when input negative number', () => {\n    fc.assert(\n      fc.property(\n        fc.integer({ max: -1 }).map((v) => v.toString()),\n        (scale) => {\n          expect(() => Scale.from(scale)).toThrow(/Scale must be positive/);\n        },\n      ),\n    );\n  });\n\n  describe('toValue()', () => {\n    it('should return string of value when current value is not null', () => {\n      fc.assert(\n        fc.property(fc.stringMatching(/^\\d{1,14}(\\.\\d)?$/), (scale) => {\n          const value = Scale.from(scale);\n          expect(value.toValue()).toEqual(scale);\n        }),\n      );\n    });\n\n    it('should return null when current value is null', () => {\n      const value = Scale.from(null);\n      expect(value.toValue()).toEqual(null);\n    });\n  });\n});\n"],"names":["fc","describe","expect","it","Scale","assert","property","option","stringMatching","nil","scale","value","from","toBeInstanceOf","toEqual","precision","string","filter","val","Number","isNaN","budget","toThrow","integer","max","map","v","toString","toValue"],"mappings":"AAAA,OAAOA,QAAQ,aAAa;AAC5B,SAASC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,QAAQ,SAAS;AAE9C,SAASC,KAAK,QAAQ,aAAU;AAEhCH,SAAS,SAAS;IAChBE,GAAG,2CAA2C;QAC5CH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CACTN,GAAGO,MAAM,CAACP,GAAGQ,cAAc,CAAC,sBAAsB;YAAEC,KAAK;QAAK,IAC9D,CAACC;YACC,MAAMC,QAAQP,MAAMQ,IAAI,CAACF;YACzBR,OAAOS,OAAOE,cAAc,CAACT;YAC7BF,OAAOS,MAAMA,KAAK,EAAEG,OAAO,CAAC;gBAC1BH,OAAOD;gBACPK,WAAW;gBACXL,OAAO;YACT;QACF;IAGN;IAEAP,GAAG,sDAAsD;QACvDH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CACTN,GAAGgB,MAAM,GAAGC,MAAM,CAAC,CAACC,MAAQC,OAAOC,KAAK,CAACD,OAAOD,QAChD,CAACG;YACCnB,OAAO,IAAME,MAAMQ,IAAI,CAACS,SAASC,OAAO,CAAC;QAC3C;IAGN;IAEAnB,GAAG,2EAA2E;QAC5EH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CAACN,GAAGQ,cAAc,CAAC,4BAA4B,CAACE;YACzDR,OAAO,IAAME,MAAMQ,IAAI,CAACF,QAAQY,OAAO,CACrC;QAEJ;IAEJ;IAEAnB,GAAG,oEAAoE;QACrEH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CACTN,GAAGuB,OAAO,CAAC;YAAEC,KAAK,CAAC;QAAE,GAAGC,GAAG,CAAC,CAACC,IAAMA,EAAEC,QAAQ,KAC7C,CAACjB;YACCR,OAAO,IAAME,MAAMQ,IAAI,CAACF,QAAQY,OAAO,CAAC;QAC1C;IAGN;IAEArB,SAAS,aAAa;QACpBE,GAAG,gEAAgE;YACjEH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CAACN,GAAGQ,cAAc,CAAC,sBAAsB,CAACE;gBACnD,MAAMC,QAAQP,MAAMQ,IAAI,CAACF;gBACzBR,OAAOS,MAAMiB,OAAO,IAAId,OAAO,CAACJ;YAClC;QAEJ;QAEAP,GAAG,iDAAiD;YAClD,MAAMQ,QAAQP,MAAMQ,IAAI,CAAC;YACzBV,OAAOS,MAAMiB,OAAO,IAAId,OAAO,CAAC;QAClC;IACF;AACF"}