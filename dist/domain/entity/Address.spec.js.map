{"version":3,"sources":["../../../src/domain/entity/Address.spec.ts"],"sourcesContent":["import fc from 'fast-check';\nimport { describe, expect, it } from 'vitest';\n\nimport {\n  AddressValue,\n  PostalCode,\n  ProjectAddressId,\n  ProjectId,\n  Province,\n} from '../value';\n\nimport { Address } from './Address';\n\nexport function createProperty() {\n  return fc\n    .record({\n      projectAddressId: fc.uuid({ version: 7 }),\n      projectId: fc.uuid({ version: 7 }),\n      projectPostalCode: fc.string({ minLength: 7, maxLength: 7 }),\n      projectProvince: fc.string({ minLength: 1, maxLength: 256 }),\n      projectAddress: fc.string({ minLength: 1, maxLength: 256 }),\n    })\n    .filter(\n      ({ projectPostalCode, projectProvince, projectAddress }) =>\n        projectPostalCode.trim().length === 7 &&\n        projectProvince.trim().length > 1 &&\n        projectProvince.trim().length <= 256 &&\n        projectAddress.trim().length > 1 &&\n        projectAddress.trim().length <= 256,\n    )\n    .map(\n      ({\n        projectAddressId,\n        projectId,\n        projectPostalCode,\n        projectProvince,\n        projectAddress,\n      }) => ({\n        projectAddressId: ProjectAddressId.from(projectAddressId),\n        projectId: ProjectId.from(projectId),\n        projectPostalCode: PostalCode.from(projectPostalCode),\n        projectProvince: Province.from(projectProvince),\n        projectAddress: AddressValue.from(projectAddress),\n      }),\n    );\n}\n\nexport function updateProperty() {\n  return fc\n    .record({\n      projectPostalCode: fc.option(\n        fc\n          .string({ minLength: 7, maxLength: 7 })\n          .filter((value) => value.trim().length === 7),\n      ),\n      projectProvince: fc.option(\n        fc\n          .string({ minLength: 1, maxLength: 256 })\n          .filter(\n            (value) => value.trim().length <= 256 && value.trim().length > 1,\n          ),\n      ),\n      projectAddress: fc.option(\n        fc\n          .string({ minLength: 1, maxLength: 256 })\n          .filter(\n            (value) => value.trim().length <= 256 && value.trim().length > 1,\n          ),\n      ),\n    })\n    .map(({ projectPostalCode, projectProvince, projectAddress }) => ({\n      projectPostalCode: projectPostalCode\n        ? PostalCode.from(projectPostalCode)\n        : undefined,\n      projectProvince: projectProvince\n        ? Province.from(projectProvince)\n        : undefined,\n      projectAddress: projectAddress\n        ? AddressValue.from(projectAddress)\n        : undefined,\n    }));\n}\n\ndescribe('Address', () => {\n  it('should return Address when input is valid', () => {\n    fc.assert(\n      fc.property(createProperty(), (args) => {\n        const address = new Address(args);\n\n        expect(address).toBeInstanceOf(Address);\n        expect(address.projectAddressId).toEqual(args.projectAddressId);\n        expect(address.projectId).toEqual(args.projectId);\n        expect(address.projectPostalCode).toEqual(args.projectPostalCode);\n        expect(address.projectProvince).toEqual(args.projectProvince);\n        expect(address.projectAddress).toEqual(args.projectAddress);\n      }),\n    );\n  });\n  describe('update', () => {\n    it('should return Address when input is valid', () => {\n      fc.assert(\n        fc.property(\n          fc.record({\n            dataToCreate: createProperty(),\n            dataToUpdate: updateProperty(),\n          }),\n          ({ dataToCreate, dataToUpdate }) => {\n            const address = new Address(dataToCreate);\n\n            expect(address).toBeInstanceOf(Address);\n\n            const updated = address.update(dataToUpdate);\n\n            expect(updated.projectAddressId.value).toEqual(\n              dataToCreate.projectAddressId.value,\n            );\n            expect(updated.projectId.value).toEqual(\n              dataToCreate.projectId.value,\n            );\n\n            expect(updated.projectPostalCode?.value).toEqual(\n              dataToUpdate.projectPostalCode?.value,\n            );\n            expect(updated.projectProvince?.value).toEqual(\n              dataToUpdate.projectProvince?.value,\n            );\n            expect(updated.projectAddress?.value).toEqual(\n              dataToUpdate.projectAddress?.value,\n            );\n          },\n        ),\n      );\n    });\n  });\n});\n"],"names":["fc","describe","expect","it","AddressValue","PostalCode","ProjectAddressId","ProjectId","Province","Address","createProperty","record","projectAddressId","uuid","version","projectId","projectPostalCode","string","minLength","maxLength","projectProvince","projectAddress","filter","trim","length","map","from","updateProperty","option","value","undefined","assert","property","args","address","toBeInstanceOf","toEqual","dataToCreate","dataToUpdate","updated","update"],"mappings":"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"}