{"version":3,"sources":["../../../../src/domain/value/Boolean/ProjectStopFlag.spec.ts"],"sourcesContent":["import fc from 'fast-check';\nimport { describe, expect, it } from 'vitest';\n\nimport { ProjectStopFlag } from './ProjectStopFlag';\n\ndescribe('ProjectStopFlag', () => {\n  it('should return ProjectStopFlag when input is boolean', () => {\n    fc.assert(\n      fc.property(fc.boolean(), (flag) => {\n        const value = ProjectStopFlag.from(flag);\n\n        expect(value).toBeInstanceOf(ProjectStopFlag);\n        expect(value.value).toEqual(flag);\n      }),\n    );\n  });\n  it('should return ProjectStopFlag when input is null or undefined', () => {\n    fc.assert(\n      fc.property(fc.constantFrom(null, undefined), (flag) => {\n        const value = ProjectStopFlag.from(flag);\n        const expectedValue = false;\n\n        expect(value).toBeInstanceOf(ProjectStopFlag);\n        expect(value.value).toEqual(expectedValue);\n      }),\n    );\n  });\n\n  it('should return true when call equals with two ProjectStopFlag has same boolean value', () => {\n    fc.assert(\n      fc.property(fc.boolean(), (flag) => {\n        const value1 = ProjectStopFlag.from(flag);\n        const value2 = ProjectStopFlag.from(flag);\n\n        expect(value1).toBeInstanceOf(ProjectStopFlag);\n        expect(value2).toBeInstanceOf(ProjectStopFlag);\n        expect(value1.value).toEqual(flag);\n        expect(value2.value).toEqual(flag);\n        expect(value1.equals(value2)).toBe(true);\n      }),\n    );\n  });\n  it('should return true when call equals with two ProjectStopFlag has same falsy value', () => {\n    fc.assert(\n      fc.property(fc.constantFrom(undefined, null), (flag) => {\n        const value1 = ProjectStopFlag.from(flag);\n        const value2 = ProjectStopFlag.from(flag);\n        const expectedValue = false;\n\n        expect(value1).toBeInstanceOf(ProjectStopFlag);\n        expect(value2).toBeInstanceOf(ProjectStopFlag);\n        expect(value1.value).toEqual(expectedValue);\n        expect(value2.value).toEqual(expectedValue);\n        expect(value1.equals(value2)).toBe(true);\n      }),\n    );\n  });\n\n  it('should return false when call equals with two ProjectStopFlag has different boolean value', () => {\n    fc.assert(\n      fc.property(fc.tuple(fc.boolean(), fc.boolean()), ([flag1, flag2]) => {\n        fc.pre(flag1 !== flag2);\n        const value1 = ProjectStopFlag.from(flag1);\n        const value2 = ProjectStopFlag.from(flag2);\n\n        expect(value1).toBeInstanceOf(ProjectStopFlag);\n        expect(value2).toBeInstanceOf(ProjectStopFlag);\n        expect(value1.value).toEqual(flag1);\n        expect(value2.value).toEqual(flag2);\n        expect(value1.equals(value2)).toBe(false);\n      }),\n    );\n  });\n  it('should return false when call equals with one ProjectStopFlag has true value and one ProjectStopFlag has falsy value', () => {\n    fc.assert(\n      fc.property(\n        fc.tuple(fc.constant(true), fc.constantFrom(null, undefined)),\n        ([flag1, flag2]) => {\n          const value1 = ProjectStopFlag.from(flag1);\n          const value2 = ProjectStopFlag.from(flag2);\n\n          expect(value1).toBeInstanceOf(ProjectStopFlag);\n          expect(value2).toBeInstanceOf(ProjectStopFlag);\n          expect(value1.value).toEqual(true);\n          expect(value2.value).toEqual(false);\n          expect(value1.equals(value2)).toBe(false);\n        },\n      ),\n    );\n  });\n});\n"],"names":["fc","describe","expect","it","ProjectStopFlag","assert","property","boolean","flag","value","from","toBeInstanceOf","toEqual","constantFrom","undefined","expectedValue","value1","value2","equals","toBe","tuple","flag1","flag2","pre","constant"],"mappings":"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"}