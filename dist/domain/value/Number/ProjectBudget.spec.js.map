{"version":3,"sources":["../../../../src/domain/value/Number/ProjectBudget.spec.ts"],"sourcesContent":["import fc from 'fast-check';\nimport { describe, expect, it } from 'vitest';\n\nimport { ProjectBudget } from './ProjectBudget';\n\ndescribe('ProjectBudget', () => {\n  it('should return ProjectBudget when input is valid', () => {\n    fc.assert(\n      fc.property(\n        fc.option(fc.stringMatching(/^\\d{1,61}(\\.\\d{1,3})?$/), { nil: null }),\n        (budget) => {\n          const value = ProjectBudget.from(budget);\n          expect(value).toBeInstanceOf(ProjectBudget);\n          expect(value.value).toEqual({\n            value: budget,\n            precision: 64,\n            scale: 3,\n          });\n        },\n      ),\n    );\n  });\n\n  it('should throw \"ProjectBudget must be number\" when input NaN', () => {\n    fc.assert(\n      fc.property(\n        fc.string().filter((val) => Number.isNaN(Number(val))),\n        (budget) => {\n          expect(() => ProjectBudget.from(budget)).toThrow(\n            /ProjectBudget must be number/,\n          );\n        },\n      ),\n    );\n  });\n\n  it('should throw \"ProjectBudget must be Decimal(64,3)\" when input not Decimal(64,3)', () => {\n    fc.assert(\n      fc.property(fc.stringMatching(/^\\d{1,60}(\\.[1-9]{4,})$/), (budget) => {\n        expect(() => ProjectBudget.from(budget)).toThrow(\n          /ProjectBudget must be Decimal\\(64,3\\)/,\n        );\n      }),\n    );\n  });\n\n  it('should throw \"ProjectBudget must be positive\" when input negative number', () => {\n    fc.assert(\n      fc.property(\n        fc.integer({ max: -1 }).map((v) => v.toString()),\n        (budget) => {\n          expect(() => ProjectBudget.from(budget)).toThrow(\n            /ProjectBudget must be positive/,\n          );\n        },\n      ),\n    );\n  });\n\n  describe('toValue()', () => {\n    it('should return string of value when current value is not null', () => {\n      fc.assert(\n        fc.property(fc.stringMatching(/^\\d{1,61}(\\.\\d{1,3})?$/), (budget) => {\n          const value = ProjectBudget.from(budget);\n          expect(value.toValue()).toEqual(budget);\n        }),\n      );\n    });\n\n    it('should return null when current value is null', () => {\n      const value = ProjectBudget.from(null);\n      expect(value.toValue()).toEqual(null);\n    });\n  });\n});\n"],"names":["fc","describe","expect","it","ProjectBudget","assert","property","option","stringMatching","nil","budget","value","from","toBeInstanceOf","toEqual","precision","scale","string","filter","val","Number","isNaN","toThrow","integer","max","map","v","toString","toValue"],"mappings":"AAAA,OAAOA,QAAQ,aAAa;AAC5B,SAASC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,QAAQ,SAAS;AAE9C,SAASC,aAAa,QAAQ,qBAAkB;AAEhDH,SAAS,iBAAiB;IACxBE,GAAG,mDAAmD;QACpDH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CACTN,GAAGO,MAAM,CAACP,GAAGQ,cAAc,CAAC,2BAA2B;YAAEC,KAAK;QAAK,IACnE,CAACC;YACC,MAAMC,QAAQP,cAAcQ,IAAI,CAACF;YACjCR,OAAOS,OAAOE,cAAc,CAACT;YAC7BF,OAAOS,MAAMA,KAAK,EAAEG,OAAO,CAAC;gBAC1BH,OAAOD;gBACPK,WAAW;gBACXC,OAAO;YACT;QACF;IAGN;IAEAb,GAAG,8DAA8D;QAC/DH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CACTN,GAAGiB,MAAM,GAAGC,MAAM,CAAC,CAACC,MAAQC,OAAOC,KAAK,CAACD,OAAOD,QAChD,CAACT;YACCR,OAAO,IAAME,cAAcQ,IAAI,CAACF,SAASY,OAAO,CAC9C;QAEJ;IAGN;IAEAnB,GAAG,mFAAmF;QACpFH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CAACN,GAAGQ,cAAc,CAAC,4BAA4B,CAACE;YACzDR,OAAO,IAAME,cAAcQ,IAAI,CAACF,SAASY,OAAO,CAC9C;QAEJ;IAEJ;IAEAnB,GAAG,4EAA4E;QAC7EH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CACTN,GAAGuB,OAAO,CAAC;YAAEC,KAAK,CAAC;QAAE,GAAGC,GAAG,CAAC,CAACC,IAAMA,EAAEC,QAAQ,KAC7C,CAACjB;YACCR,OAAO,IAAME,cAAcQ,IAAI,CAACF,SAASY,OAAO,CAC9C;QAEJ;IAGN;IAEArB,SAAS,aAAa;QACpBE,GAAG,gEAAgE;YACjEH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CAACN,GAAGQ,cAAc,CAAC,2BAA2B,CAACE;gBACxD,MAAMC,QAAQP,cAAcQ,IAAI,CAACF;gBACjCR,OAAOS,MAAMiB,OAAO,IAAId,OAAO,CAACJ;YAClC;QAEJ;QAEAP,GAAG,iDAAiD;YAClD,MAAMQ,QAAQP,cAAcQ,IAAI,CAAC;YACjCV,OAAOS,MAAMiB,OAAO,IAAId,OAAO,CAAC;QAClC;IACF;AACF"}