{"version":3,"sources":["../../../src/domain/repository/project.repository.spec.ts"],"sourcesContent":["import { Test } from '@nestjs/testing';\nimport { format } from 'date-fns';\nimport fc from 'fast-check';\nimport { afterAll, assert, beforeAll, describe, expect, it, vi } from 'vitest';\n\nimport { ProjectTable } from '../../infrastructure/persistence/project';\nimport { PrismaService } from '../../infrastructure/service';\nimport { PrismaModule } from '../../module/prisma.module';\nimport { UtilityModule } from '../../module/utility.module';\nimport {\n  Address,\n  IDataUpdateProjectFormatted,\n  Image,\n  IProjectArgs,\n  Member,\n  Project,\n  ProjectContractStatus,\n  ProjectWorkStatus,\n  UpdatedProject,\n} from '../entity';\nimport {\n  AddressValue,\n  CONSTRUCTION_TYPE_LIST,\n  ConstructionType,\n  CONTRACT_TYPE_LIST,\n  ContractorId,\n  ContractStatus,\n  ContractType,\n  CreatedUserId,\n  CustomerId,\n  DatetimeValue,\n  ImageId,\n  ImagePath,\n  Material,\n  MATERIAL_LIST,\n  MemberId,\n  PostalCode,\n  ProjectAddressId,\n  ProjectBindId,\n  ProjectBudget,\n  ProjectContractStatusId,\n  ProjectDescription,\n  ProjectId,\n  ProjectName,\n  ProjectStopFlag,\n  ProjectWorkStatusId,\n  Province,\n  Scale,\n  StatusReason,\n  TotalManWork,\n  WORK_TYPE_LIST,\n  WorkStatus,\n  WorkType,\n  YEAR_MONTH_DAY_FORMAT,\n  YearMonthDay,\n} from '../value';\n\nexport function createProjectProperty() {\n  return fc\n    .record({\n      projectId: fc.uuid({ version: 7 }),\n      projectType: fc.constantFrom(...WORK_TYPE_LIST),\n      projectName: fc\n        .string({ minLength: 1, maxLength: 256 })\n        .filter((val) => val.trim().length > 1 && val.trim().length <= 256),\n      constructionStart: fc.date({\n        min: new Date(0),\n        max: new Date(9999, 11, 31),\n      }),\n      constructionStop: fc.date({\n        min: new Date(0),\n        max: new Date(9999, 11, 31),\n      }),\n      customerId: fc.uuid({ version: 7 }),\n      contractorId: fc.uuid({ version: 7 }),\n      member: fc.record({\n        bindId: fc.uuid({ version: 7 }),\n        memberId: fc.uuid({ version: 7 }),\n      }),\n      contractType: fc.constantFrom(...CONTRACT_TYPE_LIST),\n      createdUserId: fc.uuid({ version: 7 }),\n      budget: fc.stringMatching(/^\\d{1,61}(\\.\\d{1,3})?$/),\n      description: fc.string(),\n      scale: fc.stringMatching(/^\\d{1,14}(\\.\\d)?$/),\n      address: fc.record({\n        addressId: fc.uuid({ version: 7 }),\n        postalCode: fc\n          .string({ minLength: 7, maxLength: 7 })\n          .filter((val) => val.trim().length === 7),\n        province: fc\n          .string({ minLength: 1, maxLength: 256 })\n          .filter((val) => val.trim().length > 1 && val.trim().length <= 256),\n        address: fc\n          .string({ minLength: 1, maxLength: 256 })\n          .filter((val) => val.trim().length > 1 && val.trim().length <= 256),\n      }),\n      totalManWorks: fc.stringMatching(/^\\d{1,8}(\\.\\d{1,2})?$/),\n      image: fc.record({\n        imageId: fc.uuid({ version: 7 }),\n        imagePath: fc.stringMatching(\n          /(http[s]?:\\/\\/.*\\.(?:png|jpg|gif|svg|jpeg))/,\n        ),\n      }),\n      projectMaterials: fc.subarray([...MATERIAL_LIST], { minLength: 1 }),\n      projectConstructionTypes: fc.subarray([...CONSTRUCTION_TYPE_LIST], {\n        minLength: 1,\n      }),\n      workStatus: fc.record({\n        projectWorkStatusId: fc.uuid({ version: 7 }),\n        isProjectStop: fc.boolean(),\n        projectStatusSeqMasterId: fc.uuid({ version: 7 }),\n        statusName: fc\n          .string({ minLength: 1, maxLength: 45 })\n          .filter((val) => val.trim().length > 1 && val.trim().length <= 45),\n        statusReason: fc\n          .string({ minLength: 1 })\n          .filter((val) => val.trim().length > 1),\n        statusTimestamp: fc.date({\n          min: new Date(0),\n          max: new Date(9999, 11, 31),\n        }),\n      }),\n      contractStatus: fc.record({\n        projectContractStatusId: fc.uuid({ version: 7 }),\n        isProjectStop: fc.boolean(),\n        projectContractStatusSeqMasterId: fc.uuid({ version: 7 }),\n        statusName: fc\n          .string({ minLength: 1, maxLength: 45 })\n          .filter((val) => val.trim().length > 1 && val.trim().length <= 45),\n        statusReason: fc\n          .string({ minLength: 1 })\n          .filter((val) => val.trim().length > 1),\n        statusTimestamp: fc.date({\n          min: new Date(0),\n          max: new Date(9999, 11, 31),\n        }),\n      }),\n    })\n    .map<IProjectArgs>(\n      ({\n        projectId,\n        projectType,\n        projectName,\n        constructionStart,\n        constructionStop,\n        customerId,\n        contractorId,\n        contractType,\n        createdUserId,\n        budget,\n        description,\n        address,\n        totalManWorks,\n        member,\n        image,\n        projectMaterials,\n        projectConstructionTypes,\n        scale,\n        workStatus,\n        contractStatus,\n      }) => {\n        return {\n          projectId: ProjectId.from(projectId),\n          projectType: WorkType.from(projectType),\n          projectName: ProjectName.from(projectName),\n          constructionStart: YearMonthDay.from(\n            format(constructionStart, YEAR_MONTH_DAY_FORMAT),\n          ),\n          constructionStop: YearMonthDay.from(\n            format(constructionStop, YEAR_MONTH_DAY_FORMAT),\n          ),\n          customerId: CustomerId.from(customerId),\n          contractorId: ContractorId.from(contractorId),\n          contractType: ContractType.from(contractType),\n          createdUserId: CreatedUserId.from(createdUserId),\n          description: ProjectDescription.from(description),\n          address: new Address({\n            projectAddressId: ProjectAddressId.from(address.addressId),\n            projectId: ProjectId.from(projectId),\n            projectPostalCode: PostalCode.from(address.postalCode),\n            projectProvince: Province.from(address.province),\n            projectAddress: AddressValue.from(address.address),\n          }),\n          budget: ProjectBudget.from(budget),\n          totalManWorks: TotalManWork.from(totalManWorks),\n          scale: Scale.from(scale),\n          member: new Member({\n            projectBindId: ProjectBindId.from(member.bindId),\n            projectMemberId: MemberId.from(member.memberId),\n            projectId: ProjectId.from(projectId),\n          }),\n          image: new Image({\n            imageId: ImageId.from(image.imageId),\n            imagePath: ImagePath.from(image.imagePath),\n            projectId: ProjectId.from(projectId),\n            createdUserId: CreatedUserId.from(createdUserId),\n          }),\n          projectMaterials: projectMaterials.map((val) => Material.from(val)),\n          projectConstructionTypes: projectConstructionTypes.map((val) =>\n            ConstructionType.from(val),\n          ),\n          workStatus: new ProjectWorkStatus({\n            projectWorkStatusId: ProjectWorkStatusId.from(\n              workStatus.projectWorkStatusId,\n            ),\n            isProjectStop: ProjectStopFlag.from(workStatus.isProjectStop),\n            projectId: ProjectId.from(projectId),\n            statusName: WorkStatus.makeNotStartedStatus(),\n            statusReason: StatusReason.from(workStatus.statusReason),\n            statusTimestamp: DatetimeValue.current(),\n          }),\n          contractStatus: new ProjectContractStatus({\n            projectContractStatusId: ProjectContractStatusId.from(\n              contractStatus.projectContractStatusId,\n            ),\n            isProjectStop: ProjectStopFlag.from(contractStatus.isProjectStop),\n            projectId: ProjectId.from(projectId),\n            statusName: ContractStatus.makeNewStatus(),\n            statusReason: StatusReason.from(contractStatus.statusReason),\n            statusTimestamp: DatetimeValue.current(),\n          }),\n        };\n      },\n    );\n}\n\nimport { ProjectRepository } from './project.repository';\n\nconst OPTION_UPDATE_FIELDS = [\n  'projectType' as keyof IDataUpdateProjectFormatted,\n  'projectName' as keyof IDataUpdateProjectFormatted,\n  'constructionStart' as keyof IDataUpdateProjectFormatted,\n  'constructionStop' as keyof IDataUpdateProjectFormatted,\n  'customerId' as keyof IDataUpdateProjectFormatted,\n  'contractorId' as keyof IDataUpdateProjectFormatted,\n  'scale' as keyof IDataUpdateProjectFormatted,\n  'contractType' as keyof IDataUpdateProjectFormatted,\n  'createdUserId' as keyof IDataUpdateProjectFormatted,\n  'budget' as keyof IDataUpdateProjectFormatted,\n  'description' as keyof IDataUpdateProjectFormatted,\n  'projectPostalCode' as keyof IDataUpdateProjectFormatted,\n  'projectProvince' as keyof IDataUpdateProjectFormatted,\n  'projectAddress' as keyof IDataUpdateProjectFormatted,\n  'totalManWorks' as keyof IDataUpdateProjectFormatted,\n  'memberId' as keyof IDataUpdateProjectFormatted,\n  'imagePath' as keyof IDataUpdateProjectFormatted,\n  'projectMaterials' as keyof IDataUpdateProjectFormatted,\n  'projectConstructionTypes' as keyof IDataUpdateProjectFormatted,\n];\n\nfunction omitRequestBody(\n  reqBody: IDataUpdateProjectFormatted,\n  skipFields: (keyof IDataUpdateProjectFormatted)[],\n): IDataUpdateProjectFormatted {\n  for (const field of skipFields) {\n    delete reqBody[field];\n  }\n  return reqBody;\n}\n\ndescribe('ProjectRepository', () => {\n  let repository: ProjectTable;\n  let prisma: PrismaService;\n\n  beforeAll(async () => {\n    vi.stubEnv('DATABASE_URL', process.env.DATABASE_URL_TEST ?? 'NotFound');\n    const module = await Test.createTestingModule({\n      imports: [UtilityModule, PrismaModule],\n      providers: [\n        {\n          provide: ProjectRepository,\n          useClass: ProjectTable,\n        },\n      ],\n    }).compile();\n\n    repository = module.get(ProjectRepository);\n    prisma = await module.resolve(PrismaService);\n    await prisma.project.deleteMany();\n  });\n  afterAll(async () => {\n    vi.unstubAllEnvs();\n  });\n\n  describe('pushProject', () => {\n    it('should create project success when input is valid', async () => {\n      await fc.assert(\n        fc.asyncProperty(\n          createProjectProperty(),\n          async (args: IProjectArgs) => {\n            const entity = new Project(args);\n\n            // Act\n            const result = await repository.pushProject(entity);\n            // Assert\n            expect(result).toBeInstanceOf(Project);\n            expect(result.projectId.equals(args.projectId)).toBe(true);\n            expect(result.projectType.equals(args.projectType)).toBe(true);\n            expect(result.contractType.equals(args.contractType)).toBe(true);\n            expect(result.projectMaterials.map((item) => item.value)).toEqual(\n              expect.arrayContaining(\n                args.projectMaterials.map((item) => item.value),\n              ),\n            );\n            expect(\n              result.projectConstructionTypes.map((item) => item.value),\n            ).toEqual(\n              expect.arrayContaining(\n                args.projectConstructionTypes.map((item) => item.value),\n              ),\n            );\n            expect(\n              result.workStatus.statusName.equals(args.workStatus.statusName),\n            ).toBe(true);\n            expect(\n              result.contractStatus.statusName.equals(\n                args.contractStatus.statusName,\n              ),\n            ).toBe(true);\n\n            assert.isNotNull(\n              await prisma.project.findFirst({\n                where: { projectId: result.projectId.value },\n              }),\n            );\n            await prisma.project.delete({\n              where: { projectId: result.projectId.value },\n            });\n          },\n        ),\n      );\n    });\n  });\n\n  describe('update', () => {\n    it('should update project success when input is valid', async () => {\n      await fc.assert(\n        fc.asyncProperty(\n          fc\n            .record({\n              toCreate: createProjectProperty(),\n              toUpdate: createProjectProperty(),\n              skipFields: fc.subarray(OPTION_UPDATE_FIELDS, { minLength: 1 }),\n            })\n            .map(({ toCreate, toUpdate, skipFields }) => ({\n              toCreate,\n              toUpdate: {\n                ...omitRequestBody(toUpdate, skipFields),\n                workStatusName: toUpdate.workStatus.statusName,\n                workStatusReason: toUpdate.workStatus.statusReason,\n                contractStatusName: toUpdate.contractStatus.statusName,\n                contractStatusReason: toUpdate.contractStatus.statusReason,\n              },\n            })),\n          async ({\n            toCreate,\n            toUpdate,\n          }: {\n            toCreate: IProjectArgs;\n            toUpdate: IDataUpdateProjectFormatted;\n          }) => {\n            const entity = new Project(toCreate);\n\n            // Act\n            const project = await repository.pushProject(entity);\n\n            const updateData: UpdatedProject = project.update(toUpdate);\n\n            const result: Project = await repository.update(updateData);\n\n            // Assert\n            expect(result).toBeInstanceOf(Project);\n            expect(result.projectId.equals(toCreate.projectId));\n\n            expect(result.projectType.value).equals(\n              toUpdate.projectType?.value ?? project.projectType.value,\n            );\n\n            expect(result.contractType.value).equals(\n              toUpdate.contractType?.value ?? project.contractType.value,\n            );\n\n            expect(result.projectMaterials.map((id) => id.value)).toEqual(\n              expect.arrayContaining(\n                (toUpdate.projectMaterials ?? project.projectMaterials).map(\n                  (id) => id.value,\n                ),\n              ),\n            );\n\n            expect(\n              result.projectConstructionTypes.map((id) => id.value),\n            ).toEqual(\n              expect.arrayContaining(\n                (\n                  toUpdate.projectConstructionTypes ??\n                  project.projectConstructionTypes\n                ).map((id) => id.value),\n              ),\n            );\n\n            if (toUpdate.workStatusName && toUpdate.workStatusReason) {\n              expect(\n                result.workStatus.statusName.equals(toUpdate.workStatusName),\n              ).toBe(true);\n              expect(\n                result.workStatus.statusReason.equals(\n                  toUpdate.workStatusReason,\n                ),\n              ).toBe(true);\n            } else {\n              expect(\n                result.workStatus.statusName.equals(\n                  project.workStatus.statusName,\n                ),\n              ).toBe(true);\n              expect(\n                result.workStatus.statusReason.equals(\n                  project.workStatus.statusReason,\n                ),\n              ).toBe(true);\n            }\n\n            if (toUpdate.contractStatusName && toUpdate.contractStatusReason) {\n              expect(\n                result.contractStatus.statusName.equals(\n                  toUpdate.contractStatusName,\n                ),\n              ).toBe(true);\n              expect(\n                result.contractStatus.statusReason.equals(\n                  toUpdate.contractStatusReason,\n                ),\n              ).toBe(true);\n            } else {\n              expect(\n                result.contractStatus.statusName.equals(\n                  project.contractStatus.statusName,\n                ),\n              ).toBe(true);\n              expect(\n                result.contractStatus.statusReason.equals(\n                  project.contractStatus.statusReason,\n                ),\n              ).toBe(true);\n            }\n          },\n        ),\n      );\n    });\n    it('should throw error when input not exist project id - update', async () => {\n      await fc.assert(\n        fc.asyncProperty(\n          fc.record({\n            data: createProjectProperty(),\n          }),\n          async ({ data }: { data: IProjectArgs }) => {\n            const entity = new Project(data);\n            const dataUpdate: UpdatedProject = entity.update(entity);\n            expect(async () => {\n              await repository.update(dataUpdate);\n            }).rejects.toThrowError(\n              /Invalid `this.prisma.project.update\\(\\)` invocation in/,\n            );\n          },\n        ),\n      );\n    });\n  });\n});\n"],"names":["Test","format","fc","afterAll","assert","beforeAll","describe","expect","it","vi","ProjectTable","PrismaService","PrismaModule","UtilityModule","Address","Image","Member","Project","ProjectContractStatus","ProjectWorkStatus","AddressValue","CONSTRUCTION_TYPE_LIST","ConstructionType","CONTRACT_TYPE_LIST","ContractorId","ContractStatus","ContractType","CreatedUserId","CustomerId","DatetimeValue","ImageId","ImagePath","Material","MATERIAL_LIST","MemberId","PostalCode","ProjectAddressId","ProjectBindId","ProjectBudget","ProjectContractStatusId","ProjectDescription","ProjectId","ProjectName","ProjectStopFlag","ProjectWorkStatusId","Province","Scale","StatusReason","TotalManWork","WORK_TYPE_LIST","WorkStatus","WorkType","YEAR_MONTH_DAY_FORMAT","YearMonthDay","createProjectProperty","record","projectId","uuid","version","projectType","constantFrom","projectName","string","minLength","maxLength","filter","val","trim","length","constructionStart","date","min","Date","max","constructionStop","customerId","contractorId","member","bindId","memberId","contractType","createdUserId","budget","stringMatching","description","scale","address","addressId","postalCode","province","totalManWorks","image","imageId","imagePath","projectMaterials","subarray","projectConstructionTypes","workStatus","projectWorkStatusId","isProjectStop","boolean","projectStatusSeqMasterId","statusName","statusReason","statusTimestamp","contractStatus","projectContractStatusId","projectContractStatusSeqMasterId","map","from","projectAddressId","projectPostalCode","projectProvince","projectAddress","projectBindId","projectMemberId","makeNotStartedStatus","current","makeNewStatus","ProjectRepository","OPTION_UPDATE_FIELDS","omitRequestBody","reqBody","skipFields","field","repository","prisma","stubEnv","process","env","DATABASE_URL_TEST","module","createTestingModule","imports","providers","provide","useClass","compile","get","resolve","project","deleteMany","unstubAllEnvs","asyncProperty","args","entity","result","pushProject","toBeInstanceOf","equals","toBe","item","value","toEqual","arrayContaining","isNotNull","findFirst","where","delete","toCreate","toUpdate","workStatusName","workStatusReason","contractStatusName","contractStatusReason","updateData","update","id","data","dataUpdate","rejects","toThrowError"],"mappings":"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"}