{"version":3,"sources":["../../src/utility/app.config.ts"],"sourcesContent":["import assert from 'assert';\n\nimport { Injectable, LogLevel } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\nimport { CustomLogger } from '.';\n\n@Injectable()\nexport class AppConfig {\n  private static env = process.env.NODE_ENV;\n\n  static LoggingLogLevel(): LogLevel[] {\n    const env = AppConfig.env;\n\n    switch (env) {\n      case 'test':\n        return ['error', 'warn', 'debug'];\n      case 'local':\n        return ['log', 'error', 'warn', 'debug', 'verbose', 'fatal'];\n      case 'dev':\n      case 'development':\n        return ['log', 'error', 'warn', 'fatal'];\n      case 'production':\n        return ['log', 'error', 'fatal'];\n    }\n\n    return ['log', 'error', 'warn', 'debug', 'verbose', 'fatal'];\n  }\n\n  static get DatabaseUrl(): string {\n    const env = process.env.DATABASE_URL;\n    if (!env) {\n      assert('DATABASE_URL not found!!');\n    }\n\n    return env ?? '';\n  }\n\n  static switchGraphileConfig<T, U>(development: T, production: U): T | U {\n    const env = AppConfig.env;\n\n    if (env && ['development', 'dev', 'production'].includes(env)) {\n      return production;\n    }\n\n    return development;\n  }\n\n  readonly logger = new CustomLogger('AppConfigService');\n  private readonly node_env: string;\n\n  constructor(private readonly configService: ConfigService) {\n    const env = this.configService.getOrThrow<string>('NODE_ENV');\n    this.logger.debug(`NODE_ENV: ${env}`);\n\n    this.node_env = env;\n  }\n\n  get port(): string {\n    return this.configService.getOrThrow<string>('PORT') ?? '3030';\n  }\n  get isValidationDisableErrorMessage(): boolean {\n    return !(this.isLocal || this.isDevelopment);\n  }\n\n  private get isLocal(): boolean {\n    return this.node_env === 'local';\n  }\n  private get isDevelopment(): boolean {\n    return ['development', 'dev'].includes(this.node_env);\n  }\n\n  switchSwaggerSetup(func: () => any) {\n    if (this.isLocal === true) {\n      return func();\n    }\n  }\n}\n"],"names":["assert","Injectable","ConfigService","CustomLogger","AppConfig","LoggingLogLevel","env","DatabaseUrl","process","DATABASE_URL","switchGraphileConfig","development","production","includes","port","configService","getOrThrow","isValidationDisableErrorMessage","isLocal","isDevelopment","node_env","switchSwaggerSetup","func","constructor","logger","debug","NODE_ENV"],"mappings":";;;;;;;;;AAAA,OAAOA,YAAY,SAAS;AAE5B,SAASC,UAAU,QAAkB,iBAAiB;AACtD,SAASC,aAAa,QAAQ,iBAAiB;AAE/C,SAASC,YAAY,QAAQ,aAAI;AAGjC,OAAO,MAAMC;IAGX,OAAOC,kBAA8B;QACnC,MAAMC,MAAMF,UAAUE,GAAG;QAEzB,OAAQA;YACN,KAAK;gBACH,OAAO;oBAAC;oBAAS;oBAAQ;iBAAQ;YACnC,KAAK;gBACH,OAAO;oBAAC;oBAAO;oBAAS;oBAAQ;oBAAS;oBAAW;iBAAQ;YAC9D,KAAK;YACL,KAAK;gBACH,OAAO;oBAAC;oBAAO;oBAAS;oBAAQ;iBAAQ;YAC1C,KAAK;gBACH,OAAO;oBAAC;oBAAO;oBAAS;iBAAQ;QACpC;QAEA,OAAO;YAAC;YAAO;YAAS;YAAQ;YAAS;YAAW;SAAQ;IAC9D;IAEA,WAAWC,cAAsB;QAC/B,MAAMD,MAAME,QAAQF,GAAG,CAACG,YAAY;QACpC,IAAI,CAACH,KAAK;YACRN,OAAO;QACT;QAEA,OAAOM,OAAO;IAChB;IAEA,OAAOI,qBAA2BC,WAAc,EAAEC,UAAa,EAAS;QACtE,MAAMN,MAAMF,UAAUE,GAAG;QAEzB,IAAIA,OAAO;YAAC;YAAe;YAAO;SAAa,CAACO,QAAQ,CAACP,MAAM;YAC7D,OAAOM;QACT;QAEA,OAAOD;IACT;IAYA,IAAIG,OAAe;QACjB,OAAO,IAAI,CAACC,aAAa,CAACC,UAAU,CAAS,WAAW;IAC1D;IACA,IAAIC,kCAA2C;QAC7C,OAAO,CAAE,CAAA,IAAI,CAACC,OAAO,IAAI,IAAI,CAACC,aAAa,AAAD;IAC5C;IAEA,IAAYD,UAAmB;QAC7B,OAAO,IAAI,CAACE,QAAQ,KAAK;IAC3B;IACA,IAAYD,gBAAyB;QACnC,OAAO;YAAC;YAAe;SAAM,CAACN,QAAQ,CAAC,IAAI,CAACO,QAAQ;IACtD;IAEAC,mBAAmBC,IAAe,EAAE;QAClC,IAAI,IAAI,CAACJ,OAAO,KAAK,MAAM;YACzB,OAAOI;QACT;IACF;IAzBAC,YAAY,AAAiBR,aAA4B,CAAE;aAA9BA,gBAAAA;aAHpBS,SAAS,IAAIrB,aAAa;QAIjC,MAAMG,MAAM,IAAI,CAACS,aAAa,CAACC,UAAU,CAAS;QAClD,IAAI,CAACQ,MAAM,CAACC,KAAK,CAAC,CAAC,UAAU,EAAEnB,KAAK;QAEpC,IAAI,CAACc,QAAQ,GAAGd;IAClB;AAqBF;AArEaF,UACIE,MAAME,QAAQF,GAAG,CAACoB,QAAQ"}