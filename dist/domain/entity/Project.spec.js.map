{"version":3,"sources":["../../../src/domain/entity/Project.spec.ts"],"sourcesContent":["import { format } from 'date-fns';\nimport fc from 'fast-check';\nimport { describe, expect, it } from 'vitest';\n\nimport {\n  AddressValue,\n  CONSTRUCTION_TYPE_LIST,\n  ConstructionType,\n  CONTRACT_STATUS_LIST,\n  CONTRACT_TYPE_LIST,\n  ContractorId,\n  ContractStatus,\n  ContractType,\n  CreatedUserId,\n  CustomerId,\n  DATETIME_VALUE_FORMAT,\n  DatetimeValue,\n  ImageId,\n  ImagePath,\n  Material,\n  MATERIAL_LIST,\n  MemberId,\n  PostalCode,\n  ProjectAddressId,\n  ProjectBindId,\n  ProjectBudget,\n  ProjectContractStatusId,\n  ProjectDescription,\n  ProjectId,\n  ProjectName,\n  ProjectStopFlag,\n  ProjectWorkStatusId,\n  Province,\n  Scale,\n  StatusReason,\n  TotalManWork,\n  WORK_STATUS_LIST,\n  WORK_TYPE_LIST,\n  WorkStatus,\n  WorkType,\n  YEAR_MONTH_DAY_FORMAT,\n  YearMonthDay,\n} from '../value';\n\nimport {\n  Address,\n  IDataUpdateProjectFormatted,\n  Image,\n  IProjectArgs,\n  Member,\n  Project,\n  ProjectContractStatus,\n  ProjectWorkStatus,\n  UpdatedProject,\n} from '.';\n\nexport function createProjectProperty() {\n  return fc\n    .record({\n      projectId: fc.uuid({ version: 7 }),\n      projectType: fc.constantFrom(...WORK_TYPE_LIST),\n      projectName: fc\n        .string({ minLength: 1, maxLength: 256 })\n        .filter((val) => val.trim().length > 1 && val.trim().length <= 256),\n      constructionStart: fc.date({\n        min: new Date(0),\n        max: new Date(9999, 11, 31),\n      }),\n      constructionStop: fc.date({\n        min: new Date(0),\n        max: new Date(9999, 11, 31),\n      }),\n      customerId: fc.uuid({ version: 7 }),\n      contractorId: fc.uuid({ version: 7 }),\n      member: fc.record({\n        bindId: fc.uuid({ version: 7 }),\n        memberId: fc.uuid({ version: 7 }),\n      }),\n      contractType: fc.constantFrom(...CONTRACT_TYPE_LIST),\n      createdUserId: fc.uuid({ version: 7 }),\n      budget: fc.stringMatching(/^\\d{1,61}(\\.\\d{1,3})?$/),\n      description: fc.string(),\n      scale: fc.stringMatching(/^\\d{1,14}(\\.\\d)?$/),\n      address: fc.record({\n        addressId: fc.uuid({ version: 7 }),\n        postalCode: fc\n          .string({ minLength: 7, maxLength: 7 })\n          .filter((val) => val.trim().length === 7),\n        province: fc\n          .string({ minLength: 1, maxLength: 256 })\n          .filter((val) => val.trim().length > 1 && val.trim().length <= 256),\n        address: fc\n          .string({ minLength: 1, maxLength: 256 })\n          .filter((val) => val.trim().length > 1 && val.trim().length <= 256),\n      }),\n      totalManWorks: fc.stringMatching(/^\\d{1,8}(\\.\\d{1,2})?$/),\n      image: fc.record({\n        imageId: fc.uuid({ version: 7 }),\n        imagePath: fc.stringMatching(\n          /(http[s]?:\\/\\/.*\\.(?:png|jpg|gif|svg|jpeg))/,\n        ),\n      }),\n      projectMaterials: fc.subarray([...MATERIAL_LIST], { minLength: 1 }),\n      projectConstructionTypes: fc.subarray([...CONSTRUCTION_TYPE_LIST], {\n        minLength: 1,\n      }),\n      workStatus: fc.record({\n        projectWorkStatusId: fc.uuid({ version: 7 }),\n        isProjectStop: fc.boolean(),\n        projectStatusSeqId: fc.uuid({ version: 7 }),\n        statusName: fc.constantFrom(...WORK_STATUS_LIST),\n        statusReason: fc\n          .string({ minLength: 1 })\n          .filter((val) => val.trim().length > 1),\n        statusTimestamp: fc.date({\n          min: new Date(0),\n          max: new Date(9999, 11, 31),\n        }),\n      }),\n      contractStatus: fc.record({\n        projectContractStatusId: fc.uuid({ version: 7 }),\n        isProjectStop: fc.boolean(),\n        projectContractStatusSeqId: fc.uuid({ version: 7 }),\n        statusName: fc.constantFrom(...CONTRACT_STATUS_LIST),\n        statusReason: fc\n          .string({ minLength: 1 })\n          .filter((val) => val.trim().length > 1),\n        statusTimestamp: fc.date({\n          min: new Date(0),\n          max: new Date(9999, 11, 31),\n        }),\n      }),\n    })\n    .map<IProjectArgs>(\n      ({\n        projectId,\n        projectType,\n        projectName,\n        constructionStart,\n        constructionStop,\n        customerId,\n        contractorId,\n        contractType,\n        createdUserId,\n        budget,\n        description,\n        address,\n        totalManWorks,\n        member,\n        image,\n        projectMaterials,\n        projectConstructionTypes,\n        scale,\n        workStatus,\n        contractStatus,\n      }) => {\n        return {\n          projectId: ProjectId.from(projectId),\n          projectType: WorkType.from(projectType),\n          projectName: ProjectName.from(projectName),\n          constructionStart: YearMonthDay.from(\n            format(constructionStart, YEAR_MONTH_DAY_FORMAT),\n          ),\n          constructionStop: YearMonthDay.from(\n            format(constructionStop, YEAR_MONTH_DAY_FORMAT),\n          ),\n          customerId: CustomerId.from(customerId),\n          contractorId: ContractorId.from(contractorId),\n          contractType: ContractType.from(contractType),\n          createdUserId: CreatedUserId.from(createdUserId),\n          description: ProjectDescription.from(description),\n          address: new Address({\n            projectAddressId: ProjectAddressId.from(address.addressId),\n            projectId: ProjectId.from(projectId),\n            projectPostalCode: PostalCode.from(address.postalCode),\n            projectProvince: Province.from(address.province),\n            projectAddress: AddressValue.from(address.address),\n          }),\n          budget: ProjectBudget.from(budget),\n          totalManWorks: TotalManWork.from(totalManWorks),\n          scale: Scale.from(scale),\n          member: new Member({\n            projectBindId: ProjectBindId.from(member.bindId),\n            projectMemberId: MemberId.from(member.memberId),\n            projectId: ProjectId.from(projectId),\n          }),\n          image: new Image({\n            imageId: ImageId.from(image.imageId),\n            imagePath: ImagePath.from(image.imagePath),\n            projectId: ProjectId.from(projectId),\n            createdUserId: CreatedUserId.from(createdUserId),\n          }),\n          projectMaterials: projectMaterials.map((val) => Material.from(val)),\n          projectConstructionTypes: projectConstructionTypes.map((val) =>\n            ConstructionType.from(val),\n          ),\n          workStatus: new ProjectWorkStatus({\n            projectWorkStatusId: ProjectWorkStatusId.from(\n              workStatus.projectWorkStatusId,\n            ),\n            isProjectStop: ProjectStopFlag.from(workStatus.isProjectStop),\n            projectId: ProjectId.from(projectId),\n            statusName: WorkStatus.makeNotStartedStatus(),\n            statusReason: StatusReason.from(workStatus.statusReason),\n            statusTimestamp: DatetimeValue.from(\n              format(workStatus.statusTimestamp, DATETIME_VALUE_FORMAT),\n            ),\n          }),\n          contractStatus: new ProjectContractStatus({\n            projectContractStatusId: ProjectContractStatusId.from(\n              contractStatus.projectContractStatusId,\n            ),\n            isProjectStop: ProjectStopFlag.from(contractStatus.isProjectStop),\n            projectId: ProjectId.from(projectId),\n            statusName: ContractStatus.makeNewStatus(),\n            statusReason: StatusReason.from(contractStatus.statusReason),\n            statusTimestamp: DatetimeValue.from(\n              format(contractStatus.statusTimestamp, DATETIME_VALUE_FORMAT),\n            ),\n          }),\n        };\n      },\n    );\n}\n\nconst OPTIONAL_UPDATE_FIELDS = [\n  'projectTypeId' as keyof IDataUpdateProjectFormatted,\n  'projectName' as keyof IDataUpdateProjectFormatted,\n  'constructionStart' as keyof IDataUpdateProjectFormatted,\n  'constructionStop' as keyof IDataUpdateProjectFormatted,\n  'customerId' as keyof IDataUpdateProjectFormatted,\n  'contractorId' as keyof IDataUpdateProjectFormatted,\n  'scale' as keyof IDataUpdateProjectFormatted,\n  'contractTypeId' as keyof IDataUpdateProjectFormatted,\n  'createdUserId' as keyof IDataUpdateProjectFormatted,\n  'budget' as keyof IDataUpdateProjectFormatted,\n  'description' as keyof IDataUpdateProjectFormatted,\n  'totalManWorks' as keyof IDataUpdateProjectFormatted,\n  'projectMaterials' as keyof IDataUpdateProjectFormatted,\n  'projectConstructionTypes' as keyof IDataUpdateProjectFormatted,\n];\n\nfunction omitRequestUpdateBody(\n  reqBody: IDataUpdateProjectFormatted,\n  skipFields: (keyof IDataUpdateProjectFormatted)[],\n): IDataUpdateProjectFormatted {\n  for (const field of skipFields) {\n    delete reqBody[field];\n  }\n  return reqBody;\n}\n\ndescribe('Project', () => {\n  it('should return project instance when input valid data', () => {\n    fc.assert(\n      fc.property(createProjectProperty(), (args: IProjectArgs) => {\n        const value = new Project(args);\n\n        expect(value).toBeInstanceOf(Project);\n\n        expect(value.projectId).toEqual(args.projectId);\n        expect(value.projectType).toEqual(args.projectType);\n        expect(value.projectName).toEqual(args.projectName);\n        expect(value.constructionStart).toEqual(args.constructionStart);\n        expect(value.constructionStop).toEqual(args.constructionStop);\n        expect(value.customerId).toEqual(args.customerId);\n        expect(value.contractorId).toEqual(args.contractorId);\n        expect(value.contractType).toEqual(args.contractType);\n        expect(value.createdUserId).toEqual(args.createdUserId);\n        expect(value.description).toEqual(args.description);\n        expect(value.budget).toEqual(args.budget);\n        expect(value.totalManWorks).toEqual(args.totalManWorks);\n        expect(value.scale).toEqual(args.scale);\n        expect(value.address?.projectAddressId).toEqual(\n          args.address?.projectAddressId,\n        );\n        expect(value.address?.projectId).toEqual(args.address?.projectId);\n        expect(value.address?.projectPostalCode).toEqual(\n          args.address?.projectPostalCode,\n        );\n        expect(value.address?.projectProvince).toEqual(\n          args.address?.projectProvince,\n        );\n        expect(value.address?.projectAddress).toEqual(\n          args.address?.projectAddress,\n        );\n      }),\n    );\n  });\n  describe('update', () => {\n    it('should return project instance when input data to update have optional fields', () => {\n      fc.assert(\n        fc.property(\n          fc\n            .record({\n              dataToCreateProject: createProjectProperty(),\n              dataToUpdateProject: createProjectProperty(),\n              skipFields: fc.subarray(OPTIONAL_UPDATE_FIELDS, {\n                minLength: 1,\n              }),\n            })\n            .map(\n              ({ dataToCreateProject, dataToUpdateProject, skipFields }) => ({\n                dataToCreateProject,\n                dataToUpdateProject: omitRequestUpdateBody(\n                  dataToUpdateProject,\n                  skipFields,\n                ),\n              }),\n            ),\n          ({ dataToCreateProject, dataToUpdateProject }) => {\n            const project = new Project(dataToCreateProject);\n\n            const dataUpdated: UpdatedProject =\n              project.update(dataToUpdateProject);\n\n            if (dataToUpdateProject.projectName) {\n              expect(dataUpdated.projectName?.value).toEqual(\n                dataToUpdateProject.projectName.value,\n              );\n            } else {\n              expect(project.projectName.value).toEqual(\n                dataToCreateProject.projectName.value,\n              );\n            }\n\n            if (dataToUpdateProject.constructionStart) {\n              expect(dataUpdated.constructionStart?.value).toEqual(\n                dataToUpdateProject.constructionStart.value,\n              );\n            } else {\n              expect(project.constructionStart.value).toEqual(\n                dataToCreateProject.constructionStart.value,\n              );\n            }\n\n            if (dataToUpdateProject.constructionStop) {\n              expect(dataUpdated.constructionStop?.value).toEqual(\n                dataToUpdateProject.constructionStop.value,\n              );\n            } else {\n              expect(project.constructionStop.value).toEqual(\n                dataToCreateProject.constructionStop.value,\n              );\n            }\n\n            if (dataToUpdateProject.budget) {\n              expect(Number(dataUpdated.budget?.value)).toEqual(\n                Number(dataToUpdateProject.budget.value),\n              );\n            } else {\n              expect(Number(project.budget.value)).toEqual(\n                Number(dataToCreateProject.budget.value),\n              );\n            }\n\n            if (dataToUpdateProject.description) {\n              expect(dataUpdated.description?.value).toEqual(\n                dataToUpdateProject.description.value,\n              );\n            } else {\n              expect(project.description.value).toEqual(\n                dataToCreateProject.description.value,\n              );\n            }\n\n            if (dataToUpdateProject.customerId) {\n              expect(dataUpdated.customerId?.value).toEqual(\n                dataToUpdateProject.customerId.value,\n              );\n            } else {\n              expect(project.customerId.value).toEqual(\n                dataToCreateProject.customerId.value,\n              );\n            }\n\n            if (dataToUpdateProject.contractorId) {\n              expect(dataUpdated.contractorId?.value).toEqual(\n                dataToUpdateProject.contractorId.value,\n              );\n            } else {\n              expect(project.contractorId.value).toEqual(\n                dataToCreateProject.contractorId.value,\n              );\n            }\n\n            if (dataToUpdateProject.scale) {\n              expect(Number(dataUpdated.scale?.value)).toEqual(\n                Number(dataToUpdateProject.scale.value),\n              );\n            } else {\n              expect(Number(project.scale.value)).toEqual(\n                Number(dataToCreateProject.scale.value),\n              );\n            }\n\n            if (dataToUpdateProject.totalManWorks) {\n              expect(Number(dataUpdated.totalManWorks?.value)).toEqual(\n                Number(dataToUpdateProject.totalManWorks.value),\n              );\n            } else {\n              expect(Number(project.totalManWorks.value)).toEqual(\n                Number(dataToCreateProject.totalManWorks.value),\n              );\n            }\n\n            if (dataToUpdateProject.projectType) {\n              expect(dataUpdated.projectType?.value).toEqual(\n                dataToUpdateProject.projectType.value,\n              );\n            } else {\n              expect(project.projectType.value).toEqual(\n                dataToCreateProject.projectType.value,\n              );\n            }\n\n            if (dataToUpdateProject.contractType) {\n              expect(dataUpdated.contractType?.value).toEqual(\n                dataToUpdateProject.contractType.value,\n              );\n            } else {\n              expect(project.contractType.value).toEqual(\n                dataToCreateProject.contractType.value,\n              );\n            }\n          },\n        ),\n      );\n    });\n  });\n});\n"],"names":["format","fc","describe","expect","it","AddressValue","CONSTRUCTION_TYPE_LIST","ConstructionType","CONTRACT_STATUS_LIST","CONTRACT_TYPE_LIST","ContractorId","ContractStatus","ContractType","CreatedUserId","CustomerId","DATETIME_VALUE_FORMAT","DatetimeValue","ImageId","ImagePath","Material","MATERIAL_LIST","MemberId","PostalCode","ProjectAddressId","ProjectBindId","ProjectBudget","ProjectContractStatusId","ProjectDescription","ProjectId","ProjectName","ProjectStopFlag","ProjectWorkStatusId","Province","Scale","StatusReason","TotalManWork","WORK_STATUS_LIST","WORK_TYPE_LIST","WorkStatus","WorkType","YEAR_MONTH_DAY_FORMAT","YearMonthDay","Address","Image","Member","Project","ProjectContractStatus","ProjectWorkStatus","createProjectProperty","record","projectId","uuid","version","projectType","constantFrom","projectName","string","minLength","maxLength","filter","val","trim","length","constructionStart","date","min","Date","max","constructionStop","customerId","contractorId","member","bindId","memberId","contractType","createdUserId","budget","stringMatching","description","scale","address","addressId","postalCode","province","totalManWorks","image","imageId","imagePath","projectMaterials","subarray","projectConstructionTypes","workStatus","projectWorkStatusId","isProjectStop","boolean","projectStatusSeqId","statusName","statusReason","statusTimestamp","contractStatus","projectContractStatusId","projectContractStatusSeqId","map","from","projectAddressId","projectPostalCode","projectProvince","projectAddress","projectBindId","projectMemberId","makeNotStartedStatus","makeNewStatus","OPTIONAL_UPDATE_FIELDS","omitRequestUpdateBody","reqBody","skipFields","field","assert","property","args","value","toBeInstanceOf","toEqual","dataToCreateProject","dataToUpdateProject","project","dataUpdated","update","Number"],"mappings":"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"}