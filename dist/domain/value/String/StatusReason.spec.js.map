{"version":3,"sources":["../../../../src/domain/value/String/StatusReason.spec.ts"],"sourcesContent":["import fc from 'fast-check';\nimport { describe, expect, it } from 'vitest';\n\nimport { StatusReason } from './StatusReason';\n\ndescribe('StatusReason', () => {\n  it('Should return StatusReason when input is valid', () => {\n    fc.assert(\n      fc.property(\n        fc.string({ minLength: 1 }).map((name) => name.trim()),\n        (name) => {\n          fc.pre(name.length > 1);\n          const value = StatusReason.from(name);\n          expect(value).toBeInstanceOf(StatusReason);\n          expect(value.value).toEqual(name);\n        },\n      ),\n    );\n  });\n  it('Should throw \"StatusReason must not be empty\" when input empty string', () => {\n    fc.assert(\n      fc.property(fc.constantFrom('', ' ', 'ã€€'), (name) => {\n        expect(() => {\n          StatusReason.from(name);\n        }).toThrow(/StatusReason must not be empty/);\n      }),\n    );\n  });\n});\n"],"names":["fc","describe","expect","it","StatusReason","assert","property","string","minLength","map","name","trim","pre","length","value","from","toBeInstanceOf","toEqual","constantFrom","toThrow"],"mappings":"AAAA,OAAOA,QAAQ,aAAa;AAC5B,SAASC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,QAAQ,SAAS;AAE9C,SAASC,YAAY,QAAQ,oBAAiB;AAE9CH,SAAS,gBAAgB;IACvBE,GAAG,kDAAkD;QACnDH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CACTN,GAAGO,MAAM,CAAC;YAAEC,WAAW;QAAE,GAAGC,GAAG,CAAC,CAACC,OAASA,KAAKC,IAAI,KACnD,CAACD;YACCV,GAAGY,GAAG,CAACF,KAAKG,MAAM,GAAG;YACrB,MAAMC,QAAQV,aAAaW,IAAI,CAACL;YAChCR,OAAOY,OAAOE,cAAc,CAACZ;YAC7BF,OAAOY,MAAMA,KAAK,EAAEG,OAAO,CAACP;QAC9B;IAGN;IACAP,GAAG,yEAAyE;QAC1EH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CAACN,GAAGkB,YAAY,CAAC,IAAI,KAAK,MAAM,CAACR;YAC1CR,OAAO;gBACLE,aAAaW,IAAI,CAACL;YACpB,GAAGS,OAAO,CAAC;QACb;IAEJ;AACF"}