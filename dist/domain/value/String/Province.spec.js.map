{"version":3,"sources":["../../../../src/domain/value/String/Province.spec.ts"],"sourcesContent":["import fc from 'fast-check';\nimport { describe, expect, it } from 'vitest';\n\nimport { Province } from './Province';\n\ndescribe('Province', () => {\n  it('Should return Province when input is valid', () => {\n    fc.assert(\n      fc.property(\n        fc.string({ minLength: 1, maxLength: 256 }).map((name) => name.trim()),\n        (name) => {\n          fc.pre(name.length > 1 && name.length < 257);\n          const value = Province.from(name);\n          expect(value).toBeInstanceOf(Province);\n          expect(value.value).toEqual(name);\n        },\n      ),\n    );\n  });\n  it('Should throw \"Province has maximum length of 256\" name when input too long string', () => {\n    fc.assert(\n      fc.property(\n        fc.string({ minLength: 257 }).map((name) => name.trim()),\n        (name) => {\n          fc.pre(name.length > 256);\n          expect(() => {\n            Province.from(name);\n          }).toThrow(/Province has maximum length of 256/);\n        },\n      ),\n    );\n  });\n  it('Should throw \"Province must not be empty\" when input empty string', () => {\n    fc.assert(\n      fc.property(fc.constantFrom('', ' ', 'ã€€'), (name) => {\n        expect(() => {\n          Province.from(name);\n        }).toThrow(/Province must not be empty/);\n      }),\n    );\n  });\n});\n"],"names":["fc","describe","expect","it","Province","assert","property","string","minLength","maxLength","map","name","trim","pre","length","value","from","toBeInstanceOf","toEqual","toThrow","constantFrom"],"mappings":"AAAA,OAAOA,QAAQ,aAAa;AAC5B,SAASC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,QAAQ,SAAS;AAE9C,SAASC,QAAQ,QAAQ,gBAAa;AAEtCH,SAAS,YAAY;IACnBE,GAAG,8CAA8C;QAC/CH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CACTN,GAAGO,MAAM,CAAC;YAAEC,WAAW;YAAGC,WAAW;QAAI,GAAGC,GAAG,CAAC,CAACC,OAASA,KAAKC,IAAI,KACnE,CAACD;YACCX,GAAGa,GAAG,CAACF,KAAKG,MAAM,GAAG,KAAKH,KAAKG,MAAM,GAAG;YACxC,MAAMC,QAAQX,SAASY,IAAI,CAACL;YAC5BT,OAAOa,OAAOE,cAAc,CAACb;YAC7BF,OAAOa,MAAMA,KAAK,EAAEG,OAAO,CAACP;QAC9B;IAGN;IACAR,GAAG,qFAAqF;QACtFH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CACTN,GAAGO,MAAM,CAAC;YAAEC,WAAW;QAAI,GAAGE,GAAG,CAAC,CAACC,OAASA,KAAKC,IAAI,KACrD,CAACD;YACCX,GAAGa,GAAG,CAACF,KAAKG,MAAM,GAAG;YACrBZ,OAAO;gBACLE,SAASY,IAAI,CAACL;YAChB,GAAGQ,OAAO,CAAC;QACb;IAGN;IACAhB,GAAG,qEAAqE;QACtEH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CAACN,GAAGoB,YAAY,CAAC,IAAI,KAAK,MAAM,CAACT;YAC1CT,OAAO;gBACLE,SAASY,IAAI,CAACL;YAChB,GAAGQ,OAAO,CAAC;QACb;IAEJ;AACF"}