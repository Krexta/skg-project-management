{"version":3,"sources":["../../../../src/domain/value/String/ImagePath.spec.ts"],"sourcesContent":["import fc from 'fast-check';\nimport { describe, expect, it } from 'vitest';\n\nimport { ImagePath } from './ImagePath';\n\ndescribe('ImagePath', () => {\n  it('should return ImagePath when input is valid', () => {\n    fc.assert(\n      fc.property(\n        fc.option(\n          fc.stringMatching(/(http[s]?:\\/\\/.*\\.(?:png|jpg|gif|svg|jpeg))/),\n        ),\n        (imagePath) => {\n          const value = ImagePath.from(imagePath);\n\n          expect(value).toBeInstanceOf(ImagePath);\n          expect(value.value).toEqual(imagePath);\n        },\n      ),\n    );\n  });\n\n  it('should throw \"ImagePath has maximum length of 400\" when input too long string', () => {\n    fc.assert(\n      fc.property(\n        fc.string({ minLength: 401 }).map((imagePath) => imagePath.trim()),\n        (imagePath) => {\n          fc.pre(imagePath.length > 400);\n          expect(() => ImagePath.from(imagePath)).toThrow(\n            /ImagePath has maximum length of 400/,\n          );\n        },\n      ),\n    );\n  });\n});\n"],"names":["fc","describe","expect","it","ImagePath","assert","property","option","stringMatching","imagePath","value","from","toBeInstanceOf","toEqual","string","minLength","map","trim","pre","length","toThrow"],"mappings":"AAAA,OAAOA,QAAQ,aAAa;AAC5B,SAASC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,QAAQ,SAAS;AAE9C,SAASC,SAAS,QAAQ,iBAAc;AAExCH,SAAS,aAAa;IACpBE,GAAG,+CAA+C;QAChDH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CACTN,GAAGO,MAAM,CACPP,GAAGQ,cAAc,CAAC,iDAEpB,CAACC;YACC,MAAMC,QAAQN,UAAUO,IAAI,CAACF;YAE7BP,OAAOQ,OAAOE,cAAc,CAACR;YAC7BF,OAAOQ,MAAMA,KAAK,EAAEG,OAAO,CAACJ;QAC9B;IAGN;IAEAN,GAAG,iFAAiF;QAClFH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CACTN,GAAGc,MAAM,CAAC;YAAEC,WAAW;QAAI,GAAGC,GAAG,CAAC,CAACP,YAAcA,UAAUQ,IAAI,KAC/D,CAACR;YACCT,GAAGkB,GAAG,CAACT,UAAUU,MAAM,GAAG;YAC1BjB,OAAO,IAAME,UAAUO,IAAI,CAACF,YAAYW,OAAO,CAC7C;QAEJ;IAGN;AACF"}