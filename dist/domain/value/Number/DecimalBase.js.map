{"version":3,"sources":["../../../../src/domain/value/Number/DecimalBase.ts"],"sourcesContent":["import { BaseValueObject, StringOrNull } from '../base';\n\nexport type DecimalOption = {\n  value: StringOrNull;\n  precision: number;\n  scale: number;\n};\n\nabstract class Decimal<T extends string> extends BaseValueObject<\n  T,\n  DecimalOption\n> {\n  protected validate(val: DecimalOption): DecimalOption {\n    const { value, precision, scale } = val;\n\n    if (value === null) {\n      return val;\n    }\n\n    if (Number.isNaN(Number(value))) {\n      throw new Error(`${this.constructor.name} must be number`);\n    }\n\n    if (!this.isValidDecimal(value, precision, scale)) {\n      throw new Error(\n        `${this.constructor.name} must be Decimal(${precision},${scale})`,\n      );\n    }\n\n    return val;\n  }\n\n  private isValidDecimal(\n    stringValue: string,\n    maxDigits: number,\n    maxDecimals: number,\n  ): boolean {\n    // Reject scientific notation (e.g., 2222e10)\n    if (stringValue.includes('e') || stringValue.includes('E')) {\n      return false;\n    }\n\n    // Dynamic regex for DECIMAL(X,Y)\n    const decimalRegex = new RegExp(\n      `^-?\\\\d{1,${maxDigits - maxDecimals}}(\\\\.\\\\d{1,${maxDecimals}})?$`,\n    );\n\n    if (!decimalRegex.test(stringValue)) {\n      return false;\n    }\n\n    // Check range constraints (optional)\n    const maxValue = Math.pow(10, maxDigits) - Math.pow(10, -maxDecimals);\n    const minValue = -Math.pow(10, maxDigits) + Math.pow(10, -maxDecimals);\n\n    return Number(stringValue) >= minValue && Number(stringValue) <= maxValue;\n  }\n\n  toValue(): StringOrNull {\n    return this._value.value;\n  }\n}\n\nexport abstract class PositiveDecimal<T extends string> extends Decimal<T> {\n  protected validate(val: DecimalOption): DecimalOption {\n    val = super.validate(val);\n    if (val.value !== null && Number(val.value) < 0) {\n      throw new Error(`${this.constructor.name} must be positive`);\n    }\n    return val;\n  }\n}\n"],"names":["BaseValueObject","Decimal","validate","val","value","precision","scale","Number","isNaN","Error","constructor","name","isValidDecimal","stringValue","maxDigits","maxDecimals","includes","decimalRegex","RegExp","test","maxValue","Math","pow","minValue","toValue","_value","PositiveDecimal"],"mappings":"AAAA,SAASA,eAAe,QAAsB,aAAU;AAQxD,IAAA,AAAeC,UAAf,MAAeA,gBAAkCD;IAIrCE,SAASC,GAAkB,EAAiB;QACpD,MAAM,EAAEC,KAAK,EAAEC,SAAS,EAAEC,KAAK,EAAE,GAAGH;QAEpC,IAAIC,UAAU,MAAM;YAClB,OAAOD;QACT;QAEA,IAAII,OAAOC,KAAK,CAACD,OAAOH,SAAS;YAC/B,MAAM,IAAIK,MAAM,GAAG,IAAI,CAACC,WAAW,CAACC,IAAI,CAAC,eAAe,CAAC;QAC3D;QAEA,IAAI,CAAC,IAAI,CAACC,cAAc,CAACR,OAAOC,WAAWC,QAAQ;YACjD,MAAM,IAAIG,MACR,GAAG,IAAI,CAACC,WAAW,CAACC,IAAI,CAAC,iBAAiB,EAAEN,UAAU,CAAC,EAAEC,MAAM,CAAC,CAAC;QAErE;QAEA,OAAOH;IACT;IAEQS,eACNC,WAAmB,EACnBC,SAAiB,EACjBC,WAAmB,EACV;QACT,6CAA6C;QAC7C,IAAIF,YAAYG,QAAQ,CAAC,QAAQH,YAAYG,QAAQ,CAAC,MAAM;YAC1D,OAAO;QACT;QAEA,iCAAiC;QACjC,MAAMC,eAAe,IAAIC,OACvB,CAAC,SAAS,EAAEJ,YAAYC,YAAY,WAAW,EAAEA,YAAY,IAAI,CAAC;QAGpE,IAAI,CAACE,aAAaE,IAAI,CAACN,cAAc;YACnC,OAAO;QACT;QAEA,qCAAqC;QACrC,MAAMO,WAAWC,KAAKC,GAAG,CAAC,IAAIR,aAAaO,KAAKC,GAAG,CAAC,IAAI,CAACP;QACzD,MAAMQ,WAAW,CAACF,KAAKC,GAAG,CAAC,IAAIR,aAAaO,KAAKC,GAAG,CAAC,IAAI,CAACP;QAE1D,OAAOR,OAAOM,gBAAgBU,YAAYhB,OAAOM,gBAAgBO;IACnE;IAEAI,UAAwB;QACtB,OAAO,IAAI,CAACC,MAAM,CAACrB,KAAK;IAC1B;AACF;AAEA,OAAO,MAAesB,wBAA0CzB;IACpDC,SAASC,GAAkB,EAAiB;QACpDA,MAAM,KAAK,CAACD,SAASC;QACrB,IAAIA,IAAIC,KAAK,KAAK,QAAQG,OAAOJ,IAAIC,KAAK,IAAI,GAAG;YAC/C,MAAM,IAAIK,MAAM,GAAG,IAAI,CAACC,WAAW,CAACC,IAAI,CAAC,iBAAiB,CAAC;QAC7D;QACA,OAAOR;IACT;AACF"}