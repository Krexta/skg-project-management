{"version":3,"sources":["../../../../src/domain/value/Date/YearMonthDay.ts"],"sourcesContent":["import { BaseValueObject } from '../base';\n\nexport const YEAR_MONTH_DAY_FORMAT = 'yyyy-MM-dd';\n\nexport class YearMonthDay extends BaseValueObject<\n  'YearMonthDay',\n  [string, string, string]\n> {\n  static from(date: string): YearMonthDay {\n    if (!/^\\d{4}-\\d{2}-\\d{2}$/.test(date)) {\n      throw new Error(`Invalid YearMonthDay: ${date}`);\n    }\n\n    const [year, month, day] = date.split('-', 3);\n    return new YearMonthDay([year, month, day]);\n  }\n\n  protected validate(\n    value: [string, string, string],\n  ): [string, string, string] {\n    const [year, month, day] = value;\n\n    if (!/^\\d{4}$/.test(year)) {\n      throw new Error(`Invalid Year: ${year}`);\n    }\n    if (!/^(0[1-9]|1[0-2])$/.test(month)) {\n      throw new Error(`Invalid Month: ${month}`);\n    }\n    if (!/^([0-2][0-9]|3[0-1])$/.test(day)) {\n      throw new Error(`Invalid Day: ${day}`);\n    }\n\n    const yearInt = Number(year);\n    const monthInt = Number(month);\n    const dayInt = Number(day);\n    const isLeapYear =\n      (yearInt % 4 === 0 && yearInt % 100 !== 0) || yearInt % 400 === 0;\n\n    if (monthInt === 2) {\n      if ((!isLeapYear && dayInt > 28) || (isLeapYear && dayInt > 29)) {\n        throw new Error(`Invalid Day: ${day}`);\n      }\n    }\n\n    return value;\n  }\n\n  equals(other: YearMonthDay): boolean {\n    return this._value.toString() === other._value.toString();\n  }\n\n  get year(): number {\n    return Number(this.value[0]);\n  }\n  get month(): number {\n    return Number(this.value[1]);\n  }\n  get day(): number {\n    return Number(this.value[2]);\n  }\n\n  get yearString(): string {\n    return this.value[0];\n  }\n  get monthString(): string {\n    return this.value[1];\n  }\n  get dayString(): string {\n    return this.value[2];\n  }\n\n  toString(): string {\n    return `${this.yearString}-${this.monthString}-${this.dayString}`;\n  }\n\n  toDate(): Date {\n    return new Date(this.toString());\n  }\n}\n"],"names":["BaseValueObject","YEAR_MONTH_DAY_FORMAT","YearMonthDay","from","date","test","Error","year","month","day","split","validate","value","yearInt","Number","monthInt","dayInt","isLeapYear","equals","other","_value","toString","yearString","monthString","dayString","toDate","Date"],"mappings":"AAAA,SAASA,eAAe,QAAQ,aAAU;AAE1C,OAAO,MAAMC,wBAAwB,aAAa;AAElD,OAAO,MAAMC,qBAAqBF;IAIhC,OAAOG,KAAKC,IAAY,EAAgB;QACtC,IAAI,CAAC,sBAAsBC,IAAI,CAACD,OAAO;YACrC,MAAM,IAAIE,MAAM,CAAC,sBAAsB,EAAEF,MAAM;QACjD;QAEA,MAAM,CAACG,MAAMC,OAAOC,IAAI,GAAGL,KAAKM,KAAK,CAAC,KAAK;QAC3C,OAAO,IAAIR,aAAa;YAACK;YAAMC;YAAOC;SAAI;IAC5C;IAEUE,SACRC,KAA+B,EACL;QAC1B,MAAM,CAACL,MAAMC,OAAOC,IAAI,GAAGG;QAE3B,IAAI,CAAC,UAAUP,IAAI,CAACE,OAAO;YACzB,MAAM,IAAID,MAAM,CAAC,cAAc,EAAEC,MAAM;QACzC;QACA,IAAI,CAAC,oBAAoBF,IAAI,CAACG,QAAQ;YACpC,MAAM,IAAIF,MAAM,CAAC,eAAe,EAAEE,OAAO;QAC3C;QACA,IAAI,CAAC,wBAAwBH,IAAI,CAACI,MAAM;YACtC,MAAM,IAAIH,MAAM,CAAC,aAAa,EAAEG,KAAK;QACvC;QAEA,MAAMI,UAAUC,OAAOP;QACvB,MAAMQ,WAAWD,OAAON;QACxB,MAAMQ,SAASF,OAAOL;QACtB,MAAMQ,aACJ,AAACJ,UAAU,MAAM,KAAKA,UAAU,QAAQ,KAAMA,UAAU,QAAQ;QAElE,IAAIE,aAAa,GAAG;YAClB,IAAI,AAAC,CAACE,cAAcD,SAAS,MAAQC,cAAcD,SAAS,IAAK;gBAC/D,MAAM,IAAIV,MAAM,CAAC,aAAa,EAAEG,KAAK;YACvC;QACF;QAEA,OAAOG;IACT;IAEAM,OAAOC,KAAmB,EAAW;QACnC,OAAO,IAAI,CAACC,MAAM,CAACC,QAAQ,OAAOF,MAAMC,MAAM,CAACC,QAAQ;IACzD;IAEA,IAAId,OAAe;QACjB,OAAOO,OAAO,IAAI,CAACF,KAAK,CAAC,EAAE;IAC7B;IACA,IAAIJ,QAAgB;QAClB,OAAOM,OAAO,IAAI,CAACF,KAAK,CAAC,EAAE;IAC7B;IACA,IAAIH,MAAc;QAChB,OAAOK,OAAO,IAAI,CAACF,KAAK,CAAC,EAAE;IAC7B;IAEA,IAAIU,aAAqB;QACvB,OAAO,IAAI,CAACV,KAAK,CAAC,EAAE;IACtB;IACA,IAAIW,cAAsB;QACxB,OAAO,IAAI,CAACX,KAAK,CAAC,EAAE;IACtB;IACA,IAAIY,YAAoB;QACtB,OAAO,IAAI,CAACZ,KAAK,CAAC,EAAE;IACtB;IAEAS,WAAmB;QACjB,OAAO,GAAG,IAAI,CAACC,UAAU,CAAC,CAAC,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC,EAAE,IAAI,CAACC,SAAS,EAAE;IACnE;IAEAC,SAAe;QACb,OAAO,IAAIC,KAAK,IAAI,CAACL,QAAQ;IAC/B;AACF"}