{"version":3,"sources":["../../../../src/infrastructure/persistence/project/parser.ts"],"sourcesContent":["import { Decimal } from '@prisma/client/runtime/library';\nimport { format } from 'date-fns';\n\nimport {\n  Address,\n  Image as ImageEntity,\n  Member,\n  Project,\n  ProjectContractStatus as ProjectContractStatusEntity,\n  ProjectWorkStatus as ProjectWorkStatusEntity,\n} from '../../../domain/entity';\nimport {\n  AddressValue,\n  ConstructionType,\n  ContractorId,\n  ContractStatus,\n  ContractType,\n  CreatedUserId,\n  CustomerId,\n  DATETIME_VALUE_FORMAT,\n  DatetimeValue,\n  ImageId,\n  ImagePath,\n  Material,\n  MemberId,\n  PostalCode,\n  ProjectAddressId,\n  ProjectBindId,\n  ProjectBudget,\n  ProjectContractStatusId,\n  ProjectDescription,\n  ProjectId,\n  ProjectName,\n  ProjectStopFlag,\n  ProjectWorkStatusId,\n  Province,\n  Scale,\n  StatusReason,\n  TotalManWork,\n  WorkStatus,\n  WorkType,\n  YEAR_MONTH_DAY_FORMAT,\n  YearMonthDay,\n} from '../../../domain/value';\nimport { CustomLogger } from '../../../utility';\n\nexport type ProjectContractTypeMaster = {\n  projectContractTypeMasterId: string;\n  projectContractTypeName: string;\n  projectStopFlg: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n};\n\nexport type ProjectWorkTypeMaster = {\n  projectWorkTypeMasterId: string;\n  projectWorkTypeMasterName: string;\n  projectStopFlg: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n};\n\nexport type ProjectMember = {\n  projectId: string;\n  createdAt: Date;\n  updatedAt: Date;\n  projectBindId: string;\n  projectMemberId: string;\n};\n\nexport type Image = {\n  projectId: string;\n  createdAt: Date;\n  updatedAt: Date;\n  createdUserId: string;\n  imageId: string;\n  imagePath: string;\n};\n\nexport type ProjectMaterial = {\n  projectMaterialId: string;\n  projectId: string;\n  materialType: string;\n};\n\nexport type ProjectConstructionType = {\n  projectConstructionTypeId: string;\n  projectId: string;\n  constructionType: string;\n};\n\nexport type ProjectWorkStatus = {\n  projectWorkStatusId: string;\n  isProjectStop: boolean;\n  projectId: string;\n  statusName: string;\n  statusReason: string;\n  statusTimestamp: Date;\n};\n\nexport type ProjectContractStatus = {\n  projectContractStatusId: string;\n  projectId: string;\n  statusName: string;\n  statusReason: string;\n  isProjectStop: boolean;\n  statusTimestamp: Date;\n};\n\nexport type ProjectAddress = {\n  projectAddressId: string;\n  projectId: string;\n  projectPostalCode: string;\n  projectProvince: string;\n  projectAddress: string;\n  createdAt: Date;\n  updatedAt: Date;\n};\n\nexport type ProjectRecord = {\n  projectId: string;\n  projectName: string;\n  constructionStart: Date;\n  constructionStop: Date;\n  customerId: string;\n  contractorId: string;\n  scale: Decimal | null;\n  projectWorkType: string;\n  projectContractType: string;\n  createdUserId: string;\n  budget: Decimal | null;\n  description: string | null;\n  totalManWorks: Decimal | null;\n  projectMember: ProjectMember[];\n  projectMaterial: ProjectMaterial[];\n  projectConstructionType: ProjectConstructionType[];\n  image: Image[];\n  projectWorkStatus: ProjectWorkStatus[];\n  projectContractStatus: ProjectContractStatus[];\n  projectAddress: ProjectAddress | null;\n};\n\nexport class ProjectParser {\n  constructor(readonly logger: CustomLogger) {}\n\n  convertToProjectEntity(record: ProjectRecord): Project {\n    const image = record.image[0];\n    const contractStatus = record.projectContractStatus[0];\n    const workStatus = record.projectWorkStatus[0];\n    const member = record.projectMember[0];\n\n    return new Project({\n      projectId: ProjectId.from(record.projectId),\n      projectType: WorkType.from(record.projectWorkType),\n      projectName: ProjectName.from(record.projectName),\n      constructionStart: YearMonthDay.from(\n        format(record.constructionStart, YEAR_MONTH_DAY_FORMAT),\n      ),\n      constructionStop: YearMonthDay.from(\n        format(record.constructionStop, YEAR_MONTH_DAY_FORMAT),\n      ),\n      customerId: CustomerId.from(record.customerId),\n      contractorId: ContractorId.from(record.contractorId),\n      scale: Scale.from(record.scale?.toString() ?? null),\n      contractType: ContractType.from(record.projectContractType),\n      createdUserId: CreatedUserId.from(record.createdUserId),\n      budget: ProjectBudget.from(record.budget?.toString() ?? null),\n      description: ProjectDescription.from(record.description),\n      address: record.projectAddress\n        ? new Address({\n            projectAddressId: ProjectAddressId.from(\n              record.projectAddress.projectAddressId,\n            ),\n            projectId: ProjectId.from(record.projectAddress.projectId),\n            projectPostalCode: PostalCode.from(\n              record.projectAddress.projectPostalCode,\n            ),\n            projectProvince: Province.from(\n              record.projectAddress.projectProvince,\n            ),\n            projectAddress: AddressValue.from(\n              record.projectAddress.projectAddress,\n            ),\n          })\n        : null,\n      totalManWorks: TotalManWork.from(\n        record.totalManWorks?.toString() ?? null,\n      ),\n      member: new Member({\n        projectBindId: ProjectBindId.from(member.projectBindId),\n        projectId: ProjectId.from(member.projectId),\n        projectMemberId: MemberId.from(member.projectMemberId),\n      }),\n      image: new ImageEntity({\n        imageId: image?.imageId ? ImageId.from(image.imageId) : ImageId.make(),\n        projectId: ProjectId.from(record.projectId),\n        createdUserId: image?.createdUserId\n          ? CreatedUserId.from(image.createdUserId)\n          : CreatedUserId.from(record.createdUserId),\n        imagePath: ImagePath.from(image?.imagePath ?? null),\n      }),\n      projectMaterials: record.projectMaterial.map((data) =>\n        Material.from(data.materialType),\n      ),\n      projectConstructionTypes: record.projectConstructionType.map((data) =>\n        ConstructionType.from(data.constructionType),\n      ),\n      contractStatus: new ProjectContractStatusEntity({\n        projectContractStatusId: ProjectContractStatusId.from(\n          contractStatus.projectContractStatusId,\n        ),\n        isProjectStop: ProjectStopFlag.from(contractStatus.isProjectStop),\n        projectId: ProjectId.from(contractStatus.projectId),\n        statusName: ContractStatus.from(contractStatus.statusName),\n        statusReason: StatusReason.from(contractStatus.statusReason),\n        statusTimestamp: DatetimeValue.from(\n          format(contractStatus.statusTimestamp, DATETIME_VALUE_FORMAT),\n        ),\n      }),\n      workStatus: new ProjectWorkStatusEntity({\n        projectWorkStatusId: ProjectWorkStatusId.from(\n          workStatus.projectWorkStatusId,\n        ),\n        isProjectStop: ProjectStopFlag.from(workStatus.isProjectStop),\n        projectId: ProjectId.from(workStatus.projectId),\n        statusName: WorkStatus.from(workStatus.statusName),\n        statusReason: StatusReason.from(workStatus.statusReason),\n        statusTimestamp: DatetimeValue.from(\n          format(workStatus.statusTimestamp, DATETIME_VALUE_FORMAT),\n        ),\n      }),\n    });\n  }\n}\n"],"names":["format","Address","Image","ImageEntity","Member","Project","ProjectContractStatus","ProjectContractStatusEntity","ProjectWorkStatus","ProjectWorkStatusEntity","AddressValue","ConstructionType","ContractorId","ContractStatus","ContractType","CreatedUserId","CustomerId","DATETIME_VALUE_FORMAT","DatetimeValue","ImageId","ImagePath","Material","MemberId","PostalCode","ProjectAddressId","ProjectBindId","ProjectBudget","ProjectContractStatusId","ProjectDescription","ProjectId","ProjectName","ProjectStopFlag","ProjectWorkStatusId","Province","Scale","StatusReason","TotalManWork","WorkStatus","WorkType","YEAR_MONTH_DAY_FORMAT","YearMonthDay","ProjectParser","convertToProjectEntity","record","image","contractStatus","projectContractStatus","workStatus","projectWorkStatus","member","projectMember","projectId","from","projectType","projectWorkType","projectName","constructionStart","constructionStop","customerId","contractorId","scale","toString","contractType","projectContractType","createdUserId","budget","description","address","projectAddress","projectAddressId","projectPostalCode","projectProvince","totalManWorks","projectBindId","projectMemberId","imageId","make","imagePath","projectMaterials","projectMaterial","map","data","materialType","projectConstructionTypes","projectConstructionType","constructionType","projectContractStatusId","isProjectStop","statusName","statusReason","statusTimestamp","projectWorkStatusId","constructor","logger"],"mappings":"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"}